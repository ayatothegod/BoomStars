import asyncio
import random
import time
import logging
import re
import html
import aiohttp
import string

from collections import deque
from typing import List, Tuple
from typing import Optional, Callable, Dict, Any, Awaitable
from aiogram import Bot, Dispatcher, Router, types, F, BaseMiddleware
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputFile, LabeledPrice, PreCheckoutQuery, BufferedInputFile
from aiogram.types.input_file import FSInputFile
from aiogram.exceptions import (
    TelegramAPIError, TelegramBadRequest, TelegramNotFound, TelegramForbiddenError,
    TelegramConflictError, TelegramUnauthorizedError, TelegramRetryAfter, TelegramMigrateToChat
)
from typing import Callable, Dict, Any, Awaitable
from datetime import datetime, timedelta
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from apscheduler.schedulers.asyncio import AsyncIOScheduler

try:
    from database import *
    from settings import *
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã database.py –∏ settings.py —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ.")
    exit()

logging.basicConfig(level=logging.ERROR)

router = Router()
admin_msg = {}
message_ids = {}

class AntiFloodMiddleware(BaseMiddleware):
    def __init__(self, limit: int = 1):
        self.limit = limit
        self.last_time: Dict[int, float] = {}

    async def __call__(
        self,
        handler: Callable[[types.Message | types.CallbackQuery, Dict[str, Any]], Awaitable[Any]],
        event: types.Message | types.CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        if isinstance(event, types.Message):
            if event.text and event.text.startswith('/start'):
                return await handler(event, data)

            user_id = event.from_user.id
            current_time = time.time()

            if user_id in self.last_time:
                last_time = self.last_time[user_id]
                if (current_time - last_time) < self.limit:
                    await event.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ñ–ª—É–¥–∏—Ç–µ! –û–∂–∏–¥–∞–π—Ç–µ {:.0f} —Å–µ–∫.".format(self.limit))
                    return

            self.last_time[user_id] = current_time
            return await handler(event, data)

        elif isinstance(event, types.CallbackQuery):
            user_id = event.from_user.id
            current_time = time.time()

            if user_id in self.last_time:
                last_time = self.last_time[user_id]
                if (current_time - last_time) < self.limit:
                    await event.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ñ–ª—É–¥–∏—Ç–µ! –û–∂–∏–¥–∞–π—Ç–µ {:.0f} —Å–µ–∫.".format(self.limit), show_alert=True)
                    return

            self.last_time[user_id] = current_time
            return await handler(event, data)

class ConfigStates(StatesGroup):
    waiting_for_referrals = State()
    waiting_for_tasks = State()
    waiting_for_boost = State()
    waiting_for_click = State()
    waiting_for_daily = State()

class KNBGame(StatesGroup):
    waiting_username = State()
    waiting_stake = State()

class AddUtmState(StatesGroup):
    waiting_for_url = State()
    waiting_for_delete = State()


class TheftGame(StatesGroup):
    waiting_username = State()

class LotteryState(StatesGroup):
    ticket_cash = State()

class CaptchaState(StatesGroup):
    waiting_for_answer = State()

class CaptchaClick(StatesGroup):
    waiting_click_captcha = State()

class AdminState(StatesGroup):
    create_op_not_checked = State()
    delete_op_not_checked = State()
    USERS_CHECK = State()
    ADD_STARS = State()
    REMOVE_STARS = State()
    MAILING = State()
    ADD_PROMO_CODE = State()
    REMOVE_PROMO_CODE = State()
    ADD_CHANNEL = State()
    REMOVE_CHANNEL = State()
    ADD_MAX_USES = State()
    ADD_TASK = State()
    REMOVE_TASK = State()
    PROMOCODE_INPUT = State()
    ADD_TASK_REWARD = State()
    ADD_TASK_CHANNEL = State()
    ADD_TASK_PRIVATE = State()
    CHECK_TASK_BOT = State()
    DELETE_TASK_INPUT = State()
    DELETE_CHANNEL_INPUT = State()
    DELETE_PROMO_INPUT = State()
    GIVE_BOOST = State()
    WAIT_TIME_BOOSTER = State()


async def request_op(user_id, chat_id, first_name, language_code, bot: Bot, ref_id=None, gender=None, is_premium=None):
    headers = {
        'Content-Type': 'application/json',
        'Auth': f'{SUBGRAM_TOKEN}',
        'Accept': 'application/json',
    }
    data = {'UserId': user_id, 'ChatId': chat_id, 'first_name': first_name, 'language_code': language_code}
    if gender:
        data['Gender'] = gender
    if is_premium:
        data['Premium'] = is_premium

    async with aiohttp.ClientSession() as session:
        async with session.post('https://api.subgram.ru/request-op-tokenless/', headers=headers, json=data) as response:
            if not response.ok or response.status != 200:
                logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ SubGram. –ï—Å–ª–∏ —Ç–∞–∫–∞—è –≤–∏–¥–∏—à—å —Ç–∞–∫—É—é –æ—à–∏–±–∫—É - —Å—Ç–∞–≤—å –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Subgram –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π API KEY. –í–æ—Ç –æ—à–∏–±–∫–∞: %s" % str(await response.text()))
                return 'ok'
            response_json = await response.json()

            if response_json.get('status') == 'warning':
                if ref_id:
                    await show_op(chat_id,response_json.get("links",[]), bot, ref_id=ref_id)
                else:
                    await show_op(chat_id,response_json.get("links",[]), bot)
            elif response_json.get('status') == 'gender':
                if ref_id:
                    await show_gender(chat_id, bot, ref_id=ref_id)
                else:
                    await show_gender(chat_id, bot)
            return response_json.get("status")

async def show_gender(chat_id, bot: Bot, ref_id=None):
    btn_male = types.InlineKeyboardButton(text='üë±‚Äç‚ôÇÔ∏è –ü–∞—Ä–µ–Ω—å', callback_data=f'gendergram_male:{ref_id or "None"}')
    btn_female = types.InlineKeyboardButton(text='üë©‚Äçü¶∞ –î–µ–≤—É—à–∫–∞', callback_data=f'gendergram_female:{ref_id or "None"}')

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [btn_male, btn_female]
    ])

    await bot.send_message(
        chat_id, 
        "<b>üòÆ –°–∏—Å—Ç–µ–º–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–π –ø–æ–ª!</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, <u>–∫—Ç–æ –≤—ã?</u>", 
        reply_markup=markup, 
        parse_mode='HTML'
    )
@router.callback_query(F.data.startswith('gendergram_'))
async def gendergram(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = call.data.split(':')
    gender = data[0].split('gendergram_')[1]
    ref_id = None
    args = call.data.split(':')
    if len(args) > 1 and args[1].isdigit():
        ref_id = int(args[1])
    elif len(args) > 1:
        ref_id = args[1]
    
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    first_name = call.from_user.first_name
    language_code = call.from_user.language_code
    is_premium = getattr(call.from_user, 'is_premium', None)

    try:
        await bot.delete_message(chat_id, call.message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è 123123: {e}")
    await state.update_data(gender=gender)
    response = await request_op(user_id, chat_id, first_name, language_code, bot, ref_id=ref_id, gender=gender, is_premium=is_premium)

    if response == 'ok':
        if not user_exists(user_id):
            if ref_id is not None:gi
                await handle_referral_bonus(ref_id, user_id, bot)
                urls_utm = get_urls_utm()
                for url in urls_utm:
                    url_title = url.split('=')[1]
                    if ref_id == url_title:
                        users_add_utm(url)
                        ref_id = None
                        break
                add_user(user_id, call.from_user.username, ref_id)
            else:
                add_user(user_id, call.from_user.username)
        
        await bot.answer_callback_query(call.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É üëç')
        await state.clear()
        await send_main_menu(user_id, bot)
    else:
        await bot.answer_callback_query(call.id, '‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!', show_alert=True)

async def request_task(user_id, chat_id, first_name, language_code, bot: Bot):
    headers = {
        'Content-Type': 'application/json',
        'Auth': f'{SUBGRAM_TOKEN}',
        'Accept': 'application/json',
    }
    data = {'UserId': user_id, 'ChatId': chat_id, 'action': 'task', 'MaxOP': 1}

    async with aiohttp.ClientSession() as session:
        async with session.post('https://api.subgram.ru/request-op-tokenless/', headers=headers, json=data) as response:
            if not response.ok or response.status != 200:
                logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Tasks SubGram. idk —á–µ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ —Ç–∞–∫–æ–π —Ö—É–π–Ω–µ... —Å–ø–∞—Å–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏ –µ–ø—Ç–∞. –í–æ—Ç –æ—à–∏–±–∫–∞: % s" % str(await response.text()))
                return 'ok'
            response_json = await response.json()

            if response_json.get('status') == 'warning':
                await show_task(chat_id, response_json.get("links",[]), bot)
            return response_json.get("status")

async def show_task(chat_id, links, bot: Bot):
    markup = InlineKeyboardBuilder()
    temp_row = []
    sponsor_count = 0
    for url in links:
        urls = get_urls_by_id(chat_id)
        if url in urls:
            continue
        sponsor_count += 1
        name = f'‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ‚Ññ{sponsor_count}'
        button = types.InlineKeyboardButton(text=name, url=url)
        temp_row.append(button) 

        if sponsor_count % 2 == 0:
            markup.row(*temp_row)
            temp_row = []

    if temp_row:
        markup.row(*temp_row)
    if sponsor_count > 0:
        item1 = types.InlineKeyboardButton(text='üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',callback_data=f'subgram-task:{sponsor_count}')
        back_to_main = types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_main')
        markup.row(item1)
        markup.row(back_to_main)
        photo = FSInputFile("photos/check_subs.jpg")
        await bot.send_photo(chat_id=chat_id, photo=photo, caption="<b>‚ú® –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ! ‚ú®!\n\n‚Ä¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∏–∂–µ.\n\n–ù–∞–≥—Ä–∞–¥–∞: 0.7 ‚≠êÔ∏è</b>\n\nüìå –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª–Ω–æ—Å—Ç—å—é, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–µ –û–¢–ü–ò–°–´–í–ê–ô–¢–ï–°–¨ –æ—Ç –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 3-—Ö –¥–Ω–µ–π \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\" üëá", parse_mode='HTML',reply_markup=markup.as_markup())
    else:
        builder_back = InlineKeyboardBuilder()
        builder_back.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
        markup_back = builder_back.as_markup()
        await bot.send_message(chat_id=chat_id, text="<b>üéØ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!\n\n–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ!</b>", parse_mode='HTML', reply_markup=markup_back)

async def show_op(chat_id,links, bot: Bot, ref_id=None):
    markup = InlineKeyboardBuilder()
    temp_row = []
    sponsor_count = 0
    for url in links:
        sponsor_count += 1
        name = f'C–ø–æ–Ω—Å–æ—Ä ‚Ññ{sponsor_count}'
        button = types.InlineKeyboardButton(text=name, url=url)
        temp_row.append(button) 

        if sponsor_count % 2 == 0:
            markup.row(*temp_row)
            temp_row = []

    if temp_row:
        markup.row(*temp_row)
    if ref_id != "None":
        item1 = types.InlineKeyboardButton(text='‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–Ω',callback_data=f'subgram-op:{ref_id}')
    else:
        item1 = types.InlineKeyboardButton(text='‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–Ω',callback_data='subgram-op')
    markup.row(item1)
    photo = FSInputFile("photos/check_subs.jpg")
    await bot.send_photo(chat_id, photo, caption="<b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤</b>\n\n<blockquote><b>üíú–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –ù–ê–°</b></blockquote>", parse_mode='HTML', reply_markup=markup.as_markup())

def get_random_value():
    return round(random.uniform(0.1, 0.12), 2)

async def check_subscription(user_id, channel_ids, bot: Bot, refferal_id=None):
    if not channel_ids:
        return True

    builder = InlineKeyboardBuilder()
    for channel_id in channel_ids:
        try:
            chat_member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            if chat_member.status not in ['member', 'administrator', 'creator']:
                invite_link = (await bot.create_chat_invite_link(chat_id=channel_id, member_limit=1)).invite_link
                subscribe_button = InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=invite_link)
                builder.add(subscribe_button)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return False

    if builder.export():
        markup = builder.as_markup()
        if refferal_id is not None:
            check_button = InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"check_subs:{refferal_id}")
            markup.inline_keyboard.append([check_button])
            await bot.send_message(user_id, "<b>üëãüèª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!</b>", parse_mode='HTML', reply_markup=markup)
            return False
        else:
            check_button = InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"check_subs")
            markup.inline_keyboard.append([check_button])
            await bot.send_message(user_id, "<b>üëãüèª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!</b>", parse_mode='HTML', reply_markup=markup)
            return False

    return True

def generate_captcha():
    num1 = random.randint(0, 9)
    num2 = random.randint(0, 9)
    operator = random.choice(['+', '-', '*'])
    question = f"<b>{num1} {operator} {num2} =</b>"
    answer = eval(f"{num1} {operator} {num2}")
    return question, answer

def create_captcha_keyboard(correct_answer, ref_id):
    answers = [correct_answer - 1, correct_answer, correct_answer + 1]
    random.shuffle(answers)
    builder = InlineKeyboardBuilder()
    for answer in answers:
        builder.button(text=str(answer), callback_data=f"captcha_{answer}_{ref_id}")
    builder.adjust(3)
    return builder.as_markup()

@router.message(CommandStart())
async def start_command(message: Message, bot: Bot, state: FSMContext):
    user = message.from_user
    user_id = user.id
    username = user.username
    args = message.text.split()
    banned = get_banned_user(user_id)
    if banned == 1:
        await message.reply("<b>üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!</b>", parse_mode='HTML')
        return

    try:
        all_stars = str(sum_all_stars())
        withdrawed = str(sum_all_withdrawn())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        all_stars, withdrawed = "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞"

    builder_start = InlineKeyboardBuilder()
    buttons = [
        ('‚ú® –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'click_star'),
        ('üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã', 'mini_games'),
        ('üîó –†–µ—Ñ–µ—Ä–∞–ª—ã', 'earn_stars'),
        ('üîÑ –í—ã–≤–µ—Å—Ç–∏', 'withdraw_stars_menu'),
        ('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'my_balance'),
        ('üìù –ó–∞–¥–∞–Ω–∏—è', 'tasks'),
        ('üìò –ì–∞–π–¥—ã | FAQ', 'faq'),
        ('üöÄ –ë—É—Å—Ç', 'donate'),
        ('üèÜ –¢–æ–ø', 'leaders')
    ]
    for text, callback_data in buttons:
        builder_start.button(text=text, callback_data=callback_data)
    if beta_url and beta_name:
        builder_start.button(text=beta_name, url=beta_url)
    builder_start.adjust(1, 1, 2, 2, 2, 2, 1)
    markup_start = builder_start.as_markup()


    referral_id = None
    if len(args) > 1 and args[1].isdigit():
        referral_id = int(args[1])
    elif len(args) > 1:
        referral_id = args[1]

    urls_utm = get_urls_utm()
    for url in urls_utm:
        url_title = url.split('=')[1]
        if referral_id == url_title:
            add_count_all(url)
            # referral_id = None
            break

    is_premium = getattr(user, 'is_premium', None)
    if message.chat.id != id_chat:
        if message.chat.id not in admins_id:
            response = await request_op(
                user_id=user_id,
                chat_id=message.chat.id,
                first_name=user.first_name,
                language_code=user.language_code,
                bot=bot,
                ref_id=referral_id,
                is_premium=is_premium
            )

            if response != 'ok':
                return

            if required_subscription and not await check_subscription(user_id, required_subscription, bot, referral_id):
                return
            
    markup = InlineKeyboardBuilder()
    sponsor_count = 0

    for ids in get_all_id_opnotcheck():
        ids = int(ids[0])
        link = get_link_by_id(ids)
        user_checked = has_user_checked(user_id, ids)

        if not user_checked and link:
            mark_user_checked(user_id, ids)
            sponsor_count += 1
            button = types.InlineKeyboardButton(text=f'C–ø–æ–Ω—Å–æ—Ä ‚Ññ{sponsor_count}', url=link)
            markup.row(button)

    if sponsor_count > 0:
        item1 = types.InlineKeyboardButton(text='‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–Ω', callback_data='subbed_op_notchek')
        markup.row(item1)

        photo_op = FSInputFile("photos/check_subs.jpg")
        await bot.send_photo(user_id, photo_op, caption="<b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤</b>\n\n<blockquote><b>üíú–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –ù–ê–°</b></blockquote>", parse_mode='HTML', reply_markup=markup.as_markup())

        return
    
    if not user_exists(user_id):
        if referral_id and user_exists(referral_id):
            capthca_question, capthca_answer = generate_captcha()
            await state.update_data(capthca_answer=capthca_answer)
            keyboard = create_captcha_keyboard(capthca_answer, referral_id)
            await state.set_state(CaptchaState.waiting_for_answer)
            await bot.send_message(
                user_id,
                f"{capthca_question}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
                parse_mode='HTML',
                reply_markup=keyboard
            )
            return
        else:
            urls_utm = get_urls_utm()
            for url in urls_utm:
                url_title = url.split('=')[1]
                if referral_id == url_title:
                    users_add_utm(url)
                    referral_id = None
                    break
            add_user(user_id, user.username, referral_id)
    cur_username = get_username(user_id)
    if cur_username != username:
        readd_username(user_id, username)
    await asyncio.sleep(0.5)
    await bot.send_message(user_id, "‚≠ê")
    photo = FSInputFile("photos/start.jpg")
    await bot.send_photo(
        chat_id=user_id,
        photo=photo,
        caption=(
            f"<b>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ú®</b>\n\n"
            f"<b>üåü –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{all_stars[:all_stars.find('.') + 2] if '.' in all_stars else all_stars}</code>‚≠êÔ∏è</b>\n"
            f"<b>‚ôªÔ∏è –í—Å–µ–≥–æ –æ–±–º–µ–Ω—è–ª–∏: <code>{withdrawed[:withdrawed.find('.') + 2] if '.' in withdrawed else withdrawed}</code>‚≠êÔ∏è</b>\n\n"
            "<b>–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã?</b>\n"
            "<blockquote>üî∏ <i>–ö–ª–∏–∫–∞–π, —Å–æ–±–∏—Ä–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –≤–≤–æ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã</i>\n"
            "‚Äî –≤—Å—ë —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª.\n"
            "üî∏ <i>–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π</i>\n"
            "üî∏ <i>–ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö</i>\n"
            "‚Äî –≤—Å—ë —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.</blockquote>"
        ),
        parse_mode='HTML',
        reply_markup=markup_start
    )

@router.callback_query(F.data == "subbed_op_notchek")
async def subbed_op_notchek_callback(callback_query: CallbackQuery, bot: Bot):
    try:
        await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)

        all_stars = str(sum_all_stars())
        withdrawed = str(sum_all_withdrawn())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        all_stars, withdrawed = "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞"

    builder_start = InlineKeyboardBuilder()
    buttons = [
        ('‚ú® –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'click_star'),
        ('üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã', 'mini_games'),
        ('üåü –ö—É–ø–∏—Ç—å Stars', 'buy_stars'),
        ('üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É', 'earn_stars'),
        ('üîÑ –û–±–º–µ–Ω—è—Ç—å –∑–≤—ë–∑–¥—ã', 'withdraw_stars_menu'),
        ('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'my_balance'),
        ('üìù –ó–∞–¥–∞–Ω–∏—è', 'tasks'),
        ('üìò –ì–∞–π–¥—ã | FAQ', 'faq'),
        ('üöÄ –î–æ–Ω–∞—Ç', 'donate'),
        ('üèÜ –¢–æ–ø', 'leaders')
    ]
    for text, callback_data in buttons:
        builder_start.button(text=text, callback_data=callback_data)
    if beta_url and beta_name:
        builder_start.button(text=beta_name, url=beta_url)
    builder_start.adjust(1, 2, 2, 2, 2, 2, 1)
    markup_start = builder_start.as_markup()

    user_id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id, "‚úÖ")
    await bot.send_message(user_id, "‚≠ê")
    photo = FSInputFile("photos/start.jpg")
    await bot.send_photo(
        chat_id=user_id,
        photo=photo,
        caption=(
            f"<b>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ú®</b>\n\n"
            f"<b>üåü –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{all_stars[:all_stars.find('.') + 2] if '.' in all_stars else all_stars}</code>‚≠êÔ∏è</b>\n"
            f"<b>‚ôªÔ∏è –í—Å–µ–≥–æ –æ–±–º–µ–Ω—è–ª–∏: <code>{withdrawed[:withdrawed.find('.') + 2] if '.' in withdrawed else withdrawed}</code>‚≠êÔ∏è</b>\n\n"
            "<b>–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã?</b>\n"
            "<blockquote>üî∏ <i>–ö–ª–∏–∫–∞–π, —Å–æ–±–∏—Ä–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –≤–≤–æ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã</i>\n"
            "‚Äî –≤—Å—ë —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª.\n"
            "üî∏ <i>–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π</i>\n"
            "üî∏ <i>–ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö</i>\n"
            "‚Äî –≤—Å—ë —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.</blockquote>"
        ),
        parse_mode='HTML',
        reply_markup=markup_start
    )

@router.callback_query(CaptchaState.waiting_for_answer)
async def process_captcha(callback_query: CallbackQuery, state: FSMContext, bot: Bot):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username if callback_query.from_user.username else None
    try:
        if not callback_query.data.startswith("captcha_"):
            await bot.answer_callback_query(callback_query.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        parts = callback_query.data.split('_')
        if len(parts) != 3:
            await bot.answer_callback_query(callback_query.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        user_answer = int(parts[1])
        referal = int(parts[2])

        data = await state.get_data()
        capthca_answer = data['capthca_answer']

        if user_answer == capthca_answer:
            add_user(user_id, username, referal)
            await bot.answer_callback_query(callback_query.id, "‚úÖ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤–µ—Ä–Ω–æ!")
            c_refs = get_user_referrals_count(referal)
            increment_referrals(referal)
            if c_refs < 50:
                nac = nac_1[0] * 2 if user_in_booster(referal) else nac_1[0]
                increment_stars(referal, nac)
            elif 50 <= c_refs < 250:
                nac = nac_2[0] * 2 if user_in_booster(referal) else nac_2[0]
                increment_stars(referal, nac)
            else:
                nac = nac_3[0] * 2 if user_in_booster(referal) else nac_3[0]
                increment_stars(referal, nac)

            new_ref_link = f"https://t.me/{(await bot.me()).username}?start={referal}"
            await bot.send_message(
                referal,
                f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n"
                f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ +{nac}‚≠êÔ∏è –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞.\n"
                f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –µ—â—ë —Ä–∞–∑:\n<code>{new_ref_link}</code>",
                parse_mode='HTML'
            )

            await bot.delete_message(user_id, callback_query.message.message_id)
            await send_main_menu(user_id, bot)
            await state.clear()
        else:
            await bot.answer_callback_query(callback_query.id, "‚ùå –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_captcha: {e}")
        await bot.answer_callback_query(callback_query.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.message(F.text == '/adminpanel')
async def adminpanel_command(message: Message, bot: Bot):
    if message.from_user.id in admins_id:
        builder_admin = InlineKeyboardBuilder()

        builder_admin.button(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data='change_config')

        builder_admin.button(text="‚ÑπÔ∏è –°–æ–∑–¥–∞—Ç—å –æ–ø –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏", callback_data="create_op_not_checked")
        builder_admin.button(text="‚ÑπÔ∏è –£–¥–∞–ª–∏—Ç—å –æ–ø –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏", callback_data="delete_op_not_checked")

        builder_admin.button(text='üóÑÔ∏è –î–∞–º–ø –±–∞–∑—ã', callback_data='dump')
        builder_admin.button(text='üîó UTM-–°—Å—ã–ª–∫–∏', callback_data='utm')
        builder_admin.button(text='üé∞ –õ–æ—Ç–µ—Ä–µ—è', callback_data='admin_lotery')
        
        builder_admin.button(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='stats')
        builder_admin.button(text='üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ', callback_data='users_check')

        builder_admin.button(text='‚ú® –í—ã–¥–∞—Ç—å –∑–≤—ë–∑–¥—ã', callback_data='add_stars')
        builder_admin.button(text='üí´ –°–Ω—è—Ç—å –∑–≤—ë–∑–¥—ã', callback_data='remove_stars')

        builder_admin.button(text='üì§ –†–∞—Å—Å—ã–ª–∫–∞', callback_data='mailing')

        builder_admin.button(text='üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='add_promo_code')
        builder_admin.button(text='‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='remove_promo_code')

        builder_admin.button(text='‚ûïüì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data='add_channel')
        builder_admin.button(text='üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤', callback_data='info_added_channels')
        builder_admin.button(text='‚ûñüì¢ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data='remove_channel')

        builder_admin.button(text='üèÜ –¢–æ–ø-50 –ë–∞–ª–∞–Ω—Å', callback_data='top_balance')
        builder_admin.button(text='üöÄ –í—ã–¥–∞—Ç—å –±—É—Å—Ç', callback_data='give_boost')

        markup_admin = builder_admin.adjust(1, 2, 3, 2, 2, 1, 2, 3, 2).as_markup()
        
        try:
            headers = {
                'Content-Type': 'application/json',
                'Auth': f'{SUBGRAM_TOKEN}',
                'Accept': 'application/json'
            }
            user_count = get_user_count()
            total_withdrawn = get_total_withdrawn()
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.post('https://api.subgram.ru/get-balance/', headers=headers) as response:
                        response_json = await response.json()
                        balance = response_json.get('balance', 0)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
                balance = 0
            
            msg_text = (
                "<b>üéâ –í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
                f"üí∏ –í—ã–ø–ª–∞—á–µ–Ω–æ: {total_withdrawn} ‚≠êÔ∏è\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å SubGram: {balance} ‚ÇΩ"
            )
            await bot.send_message(message.from_user.id, msg_text, parse_mode='HTML', reply_markup=markup_admin)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
            await bot.send_message(
                message.from_user.id,
                "<b>üéâ –í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
                parse_mode='HTML',
                reply_markup=markup_admin
            )
    else:
        await bot.send_message(message.from_user.id, "<b>üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode='HTML')

@router.callback_query(F.data == "create_op_not_checked")
async def create_op_not_checked(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (–ù–ï ID –ö–ê–ù–ê–õ–ê)</b>", parse_mode='HTML')
    await state.set_state(AdminState.create_op_not_checked)

@router.callback_query(F.data == "delete_op_not_checked")
async def delete_op_not_checked(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (–ù–ï ID –ö–ê–ù–ê–õ–ê)</b>", parse_mode='HTML')
    await state.set_state(AdminState.delete_op_not_checked)


@router.message(AdminState.create_op_not_checked)
async def process_create_op_not_checked(message: Message, bot: Bot, state: FSMContext):
    link = message.text
    add_opnotcheck(link)
    await bot.send_message(message.from_user.id, "<b>–û–ü –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.</b>", parse_mode='HTML')
    await state.clear()

@router.message(AdminState.delete_op_not_checked)
async def process_delete_op_not_checked(message: Message, bot: Bot, state: FSMContext):
    link = message.text
    delete_opnotcheck_by_link(link)
    await bot.send_message(message.from_user.id, "<b>–û–ü –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.</b>", parse_mode='HTML')
    await state.clear()


@router.callback_query(F.data == 'dump')
async def dump_callback(call: CallbackQuery, bot: Bot):
    try:
        if call.message.chat.id in admins_id:
            user_ids = get_users_ids()
            
            if not user_ids:
                await bot.send_message(call.from_user.id, "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞")
                return
            
            text = '\n'.join(str(user_id[0]) for user_id in user_ids)
            document = BufferedInputFile(
                text.encode('utf-8'),
                filename='dumped.txt'
            )
            await bot.send_document(
                chat_id=call.from_user.id,
                document=document,
                caption="üì• –î–∞–º–ø –±–∞–∑—ã (ID)"
            )
            
    except Exception as e:
        logging.error(f"Dump error: {e}")
        await bot.send_message(call.from_user.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–º–ø–∞: {str(e)}")
        

@router.callback_query(F.data == "utm")
async def utm_callback(call: CallbackQuery, bot: Bot):
    if call.message.chat.id in admins_id:
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        builder_utm = InlineKeyboardBuilder()
        builder_utm.button(text='üåê –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data='add_utm')
        builder_utm.button(text='üìÑ –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫', callback_data='list_utm')
        builder_utm.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adminpanelka")
        markup_utm = builder_utm.adjust(2, 1).as_markup()
        await bot.send_message(call.from_user.id, f"<b>ü™Ö –í—ã –≤–æ—à–ª–∏ –≤ UTM-–ø–∞–Ω–µ–ª—å</b>", parse_mode='HTML', reply_markup=markup_utm)

@router.callback_query(F.data.startswith('utm_'))
async def utm_callback(call: CallbackQuery, bot: Bot):
    if call.message.chat.id in admins_id:
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        data = call.data[3:]
        if data.startswith("_"):
            data = data[1:]
        url = data
        try:
            url_title = url.split('=')[1]
        except IndexError:
            url_title = url

        all_users = get_count_all(url)        
        count_users = users_utm_count(url)
        count_op_users = users_utm_count_op(url)
        
        utm_link_use = InlineKeyboardBuilder()
        utm_link_use.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"delete_utm_{url}")
        utm_link_use.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="list_utm")
        markup_utm_use = utm_link_use.adjust(1, 1).as_markup()
        
        await bot.send_message(
            call.from_user.id,
            f"<b>üçÄ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Å—ã–ª–∫—É <code>#{url_title}</code>\nüìÑ –°—Å—ã–ª–∫–∞: <code>{url}</code></b>\n\n"
            f"<blockquote>\nüë§ –í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: {all_users}\nüë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤: {count_users}\nüë§ –ü—Ä–æ—à–ª–∏ –û–ü: {count_op_users}</blockquote>",
            parse_mode='HTML',
            reply_markup=markup_utm_use
        )


@router.callback_query(F.data.startswith("delete_utm_"))
async def delete_utm_callback(call: CallbackQuery, bot: Bot):
    if call.message.chat.id in admins_id:
        url = call.data.replace("delete_utm_", "")
        try:
            delete_utm(url)
            await bot.answer_callback_query(call.id, text="‚úÖ UTM-—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
            await bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception as e:
            await bot.answer_callback_query(call.id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ UTM-—Å—Å—ã–ª–∫–∏.", show_alert=True)


@router.callback_query(F.data == "add_utm")
async def add_utm_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    if call.from_user.id in admins_id:
        await state.set_state(AddUtmState.waiting_for_url)
        await bot.send_message(call.from_user.id, "üåê –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è UTM-—Å—Å—ã–ª–∫–∏:", parse_mode='HTML')


@router.message(AddUtmState.waiting_for_url)
async def process_add_utm(message: Message, state: FSMContext, bot: Bot):
    url_title = message.text
    url = f"https://t.me/{(await bot.me()).username}?start={url_title}"
    try:
        create_utm(url)
        await bot.send_message(
            message.from_user.id,
            f"‚úÖ UTM-—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n\n<blockquote>üëâ –°—Å—ã–ª–∫–∞: <code>{url}</code></blockquote>",
            parse_mode='HTML'
        )
    except Exception as e:
        await bot.send_message(message.from_user.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ UTM-—Å—Å—ã–ª–∫–∏.", parse_mode='HTML')
    await state.clear()

@router.callback_query(F.data == "list_utm")
async def list_utm(call: CallbackQuery, bot: Bot):
    if call.message.chat.id in admins_id:
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        utm_links = get_urls_utm()
        temp_links = []
        count_links = 0
        builder_utm_links = InlineKeyboardBuilder()
        for url in utm_links:
            count_links += 1
            name = url.split('=')[1]
            # print(url)
            button = types.InlineKeyboardButton(text=f"{name}", callback_data=f"utm_{url}")
            temp_links.append(button)

            if count_links % 2 == 0:
                builder_utm_links.row(*temp_links)
                temp_links = []

        if temp_links:
            builder_utm_links.row(*temp_links)

        builder_utm_links.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="utm")

        await bot.send_message(call.from_user.id, f"<b>üì¶ –°–ø–∏—Å–æ–∫ UTM-—Å—Å—ã–ª–æ–∫:</b>", parse_mode='HTML', reply_markup=builder_utm_links.as_markup())

@router.callback_query(F.data == "admin_lotery")
async def adminka_lottery(call: CallbackQuery, bot: Bot):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    if call.message.chat.id in admins_id:
        builder_lottery = InlineKeyboardBuilder()
        builder_lottery.button(text='üéâ –ù–∞—á–∞—Ç—å –ª–æ—Ç–µ—Ä–µ—é', callback_data='start_lotery')
        builder_lottery.button(text='üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é', callback_data='finish_lotery')
        builder_lottery.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adminpanelka")
        markup_lottery = builder_lottery.adjust(2, 1).as_markup()
        lot_id = get_id_lottery_enabled()
        cash = get_cash_in_lottery()
        ticket_cash = get_ticket_cash_in_lottery()

        try:
            await bot.send_message(call.message.chat.id, f"<b>üéâ –í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ª–æ—Ç–µ—Ä–µ—é\n\nüé∞ –ê–∫—Ç–∏–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è: <code>{lot_id}</code>\nüí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ Stars: <code>{cash}</code>\nüí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: <code>{ticket_cash}</code></b>", parse_mode='HTML', reply_markup=markup_lottery)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
    else:
        await bot.send_message(call.message.chat.id, "<b>üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode='HTML')

@router.callback_query(F.data == "finish_lotery")
async def finish_lotery_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    if call.message.chat.id in admins_id:
        active_lottery = get_active_lottery_id()
        if not active_lottery:
            await bot.send_message(call.message.chat.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏")
            return
        cash = get_cash_in_lottery()
        cash = float(cash) * 0.6
        markup_exit_to_admin = InlineKeyboardBuilder()
        markup_exit_to_admin.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adminpanelka")
        markup_exit_to_admin.adjust(1)
        keyboard = markup_exit_to_admin.as_markup()
        status, win_id = finish_and_update_winner()
        if status:
            try:
                await bot.send_message(call.message.chat.id, f"<b>üéâ –õ–æ—Ç–µ—Ä–µ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n<b>üéÅ –í—ã–∏–≥—Ä–∞–ª <code>{win_id}</code>\nüí∞ –°—É–º–º–∞: {cash:.2f}</b>", parse_mode='HTML', reply_markup=keyboard)
                await bot.send_message(win_id, f"<b>üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ª–æ—Ç–µ—Ä–µ—é!\n\nüí∞ –í—ã –∑–∞–±–∏—Ä–∞–µ—Ç–µ 60% —Å–æ –≤—Å–µ—Ö –∑–≤–µ–∑–¥ –≤ –ª–æ—Ç–µ—Ä–µ–µ: {cash:.2f}</b>", parse_mode='HTML')
                increment_stars(win_id, cash)
            except Exception as e:
                logging.error(f"[LOTTERY] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        else:
            await bot.send_message(call.message.chat.id, "<b>üö´ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –±–∏–ª–µ—Ç–∞–º–∏</b>", parse_mode='HTML', reply_markup=keyboard)
    else:
        await bot.send_message(call.message.chat.id, "<b>üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode='HTML')

@router.callback_query(F.data == "start_lotery")
async def start_lotery_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    if call.message.chat.id in admins_id:
        await bot.send_message(call.message.chat.id, "<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞: </b>", parse_mode='HTML')
        await state.set_state(LotteryState.ticket_cash)
    else:
        await bot.send_message(call.message.chat.id, "<b>üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode='HTML')

@router.message(StateFilter(LotteryState.ticket_cash))
async def handle_ticket_cash(message: Message, bot: Bot, state: FSMContext):
    try:
        ticket_cash = float(message.text)
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return

    try:
        await bot.delete_message(message.chat.id, message.message_id)
        await bot.delete_message(message.chat.id, message.message_id - 1)
    except:
        pass

    await asyncio.sleep(1)
    
    create_lottery(0, ticket_cash)

    markuper = InlineKeyboardBuilder()
    markuper.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adminpanelka")
    markuper.adjust(1)
    keyboard = markuper.as_markup()
    
    lot_id = get_id_lottery_enabled()
    cash = get_cash_in_lottery()
    
    await bot.send_message(
        chat_id=message.chat.id,
        text=f"<b>üéâ –õ–æ—Ç–µ—Ä–µ—è –Ω–∞—á–∞–ª–∞—Å—å!\n\nüé∞ –ê–∫—Ç–∏–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è: <code>{lot_id}</code>\nüí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ Stars: <code>{cash}</code>\nüí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: <code>{ticket_cash}</code></b>",
        parse_mode='HTML',
        reply_markup=keyboard
    )
    
    await state.clear()

@router.callback_query(F.data == "give_boost")
async def giveboost(call: CallbackQuery, bot: Bot, state: FSMContext):
    if call.from_user.id in admins_id:
        await bot.send_message(call.from_user.id, "–í–≤–¥–µ–∏—Ç–µ ID —á–µ–ª–æ–≤–µ–∫–∞:")
        await state.set_state(AdminState.WAIT_TIME_BOOSTER)

@router.message(AdminState.WAIT_TIME_BOOSTER)
async def handle_time(message: Message, bot: Bot, state: FSMContext):
    id = int(message.text)
    await state.update_data(user_id=id)
    await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:")
    await state.set_state(AdminState.GIVE_BOOST)

@router.message(AdminState.GIVE_BOOST)
async def handle_give(message: Message, bot: Bot, state: FSMContext):
    try:
        time = int(message.text)
        data = await state.get_data()
        user_id = data["user_id"]
        
        current_time = datetime.now()
        delta = timedelta(days=time)
        future_time = current_time + delta
        future_timestamp = future_time.timestamp()

        add_or_update_user_boost(user_id, future_timestamp)
        await bot.send_message(message.from_user.id, f"–í—ã –≤—ã–¥–∞–ª–∏ –±—É—Å—Ç {user_id} –Ω–∞ {time} –¥–Ω–µ–π")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –º–∞–Ω—É–∞–ª—å–Ω–æ–π –≤—ã–¥–∞—á–µ –±—É—Å—Ç–∞: {e}")
    await state.clear()



@router.callback_query(F.data == "adminpanelka")
async def adminpanelka_callback(call: CallbackQuery, bot: Bot):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    if call.message.chat.id in admins_id:
        builder_admin = InlineKeyboardBuilder()

        builder_admin.button(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data='change_config')

        builder_admin.button(text="‚ÑπÔ∏è –°–æ–∑–¥–∞—Ç—å –æ–ø –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏", callback_data="create_op_not_checked")
        builder_admin.button(text="‚ÑπÔ∏è –£–¥–∞–ª–∏—Ç—å –æ–ø –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏", callback_data="delete_op_not_checked")

        builder_admin.button(text='üóÑÔ∏è –î–∞–º–ø –±–∞–∑—ã', callback_data='dump')
        builder_admin.button(text='üîó UTM-–°—Å—ã–ª–∫–∏', callback_data='utm')
        builder_admin.button(text='üé∞ –õ–æ—Ç–µ—Ä–µ—è', callback_data='admin_lotery')
        
        builder_admin.button(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='stats')
        builder_admin.button(text='üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ', callback_data='users_check')

        builder_admin.button(text='‚ú® –í—ã–¥–∞—Ç—å –∑–≤—ë–∑–¥—ã', callback_data='add_stars')
        builder_admin.button(text='üí´ –°–Ω—è—Ç—å –∑–≤—ë–∑–¥—ã', callback_data='remove_stars')

        builder_admin.button(text='üì§ –†–∞—Å—Å—ã–ª–∫–∞', callback_data='mailing')

        builder_admin.button(text='üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='add_promo_code')
        builder_admin.button(text='‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='remove_promo_code')

        builder_admin.button(text='‚ûïüì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data='add_channel')
        builder_admin.button(text='üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤', callback_data='info_added_channels')
        builder_admin.button(text='‚ûñüì¢ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data='remove_channel')

        builder_admin.button(text='üèÜ –¢–æ–ø-50 –ë–∞–ª–∞–Ω—Å', callback_data='top_balance')
        builder_admin.button(text='üöÄ –í—ã–¥–∞—Ç—å –±—É—Å—Ç', callback_data='give_boost')

        markup_admin = builder_admin.adjust(1, 2, 3, 2, 2, 1, 2, 3, 2).as_markup()

        try:
            user_count = get_user_count()
            total_withdrawn = get_total_withdrawn()
            await bot.send_message(call.message.chat.id, f"<b>üéâ –í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\nüí∏ –í—ã–ø–ª–∞—á–µ–Ω–æ: {total_withdrawn} ‚≠êÔ∏è", parse_mode='HTML', reply_markup=markup_admin)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
            await bot.send_message(call.message.chat.id, "<b>üéâ –í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", parse_mode='HTML', reply_markup=markup_admin)
    else:
        await bot.send_message(call.message.chat.id, "<b>üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode='HTML')

@router.callback_query(F.data == "change_config")
async def change_config_callback(call: CallbackQuery, bot: Bot):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    
    builder_config = InlineKeyboardBuilder()
    
    builder_config.button(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="config_referrals")
    builder_config.button(text="üìù –ó–∞–¥–∞–Ω–∏—è", callback_data="config_tasks")
    builder_config.button(text="üöÄ –ë—É—Å—Ç", callback_data="config_boost")
    builder_config.button(text="üñ±Ô∏è –ö–ª–∏–∫", callback_data="config_click")
    builder_config.button(text="üìÖ –ï–∂–µ–¥–Ω–µ–≤–∫–∞", callback_data="config_daily")
    builder_config.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adminpanelka")

    
    markup_config = builder_config.adjust(2, 2, 1, 1).as_markup()
    
    await bot.send_message(
        call.message.chat.id,
        "<b>üõ†Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
        parse_mode="HTML",
        reply_markup=markup_config
    )

@router.callback_query(F.data == "config_referrals")
async def config_referrals_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    msg_text = (
        "‚ú® <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤</b> ‚ú®\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n"
        "–§–æ—Ä–º–∞—Ç: <code>nac_1 nac_2 nac_3 refs_boost refs_noboost</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>0.8 1.2 1.6 12 18</code>\n\n"
        "<i>üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...</i>"
    )
    await bot.send_message(call.message.chat.id, msg_text, parse_mode="HTML")
    await state.set_state(ConfigStates.waiting_for_referrals)

@router.message(ConfigStates.waiting_for_referrals)
async def process_referrals(message: Message, state: FSMContext, bot: Bot):
    try:
        parts = message.text.split()
        if len(parts) != 5:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –û–∂–∏–¥–∞–µ—Ç—Å—è 5 –∑–Ω–∞—á–µ–Ω–∏–π.")
        new_nac_1, new_nac_2, new_nac_3, new_refs_boost, new_refs_noboost = parts
        nac_1[0] = float(new_nac_1)
        nac_2[0] = float(new_nac_2)
        nac_3[0] = float(new_nac_3)
        refs_boost[0] = int(new_refs_boost)
        refs_noboost[0] = int(new_refs_noboost)
        await bot.send_message(
            message.chat.id, 
            "‚úÖ <b>–†–µ—Ñ–µ—Ä–∞–ª—ã</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", 
            parse_mode="HTML"
        )
    except Exception as e:
        await bot.send_message(
            message.chat.id, 
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
            parse_mode="HTML"
        )
    finally:
        await state.clear()

# –ó–∞–¥–∞–Ω–∏—è
@router.callback_query(F.data == "config_tasks")
async def config_tasks_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    msg_text = (
        "‚úèÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ó–∞–¥–∞–Ω–∏–π</b> ‚úèÔ∏è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π.\n"
        "–§–æ—Ä–º–∞—Ç: <code>0.9</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>0.9</code>\n\n"
        "<i>üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...</i>"
    )
    await bot.send_message(call.message.chat.id, msg_text, parse_mode="HTML")
    await state.set_state(ConfigStates.waiting_for_tasks)

@router.message(ConfigStates.waiting_for_tasks)
async def process_tasks(message: Message, state: FSMContext, bot: Bot):
    try:
        new_value = float(message.text)
        task_grant[0] = new_value
        await bot.send_message(
            message.chat.id, 
            "‚úÖ <b>–ó–∞–¥–∞–Ω–∏—è</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", 
            parse_mode="HTML"
        )
    except Exception as e:
        await bot.send_message(
            message.chat.id, 
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
            parse_mode="HTML"
        )
    finally:
        await state.clear()

# –ë—É—Å—Ç
@router.callback_query(F.data == "config_boost")
async def config_boost_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    msg_text = (
        "üöÄ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë—É—Å—Ç–∞</b> üöÄ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Å—Ç–∞.\n"
        "–§–æ—Ä–º–∞—Ç: <code>650</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>650</code>\n\n"
        "<i>üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...</i>"
    )
    await bot.send_message(call.message.chat.id, msg_text, parse_mode="HTML")
    await state.set_state(ConfigStates.waiting_for_boost)

@router.message(ConfigStates.waiting_for_boost)
async def process_boost(message: Message, state: FSMContext, bot: Bot):
    try:
        new_value = int(message.text)
        boost_cost[0] = new_value
        await bot.send_message(
            message.chat.id, 
            "‚úÖ <b>–ë—É—Å—Ç</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", 
            parse_mode="HTML"
        )
    except Exception as e:
        await bot.send_message(
            message.chat.id, 
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
            parse_mode="HTML"
        )
    finally:
        await state.clear()

# –ö–ª–∏–∫
@router.callback_query(F.data == "config_click")
async def config_click_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    msg_text = (
        "üñ±Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ö–ª–∏–∫–∞</b> üñ±Ô∏è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞ –∫–ª–∏–∫.\n"
        "–§–æ—Ä–º–∞—Ç: <code>0.2</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>0.2</code>\n\n"
        "<i>üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...</i>"
    )
    await bot.send_message(call.message.chat.id, msg_text, parse_mode="HTML")
    await state.set_state(ConfigStates.waiting_for_click)

@router.message(ConfigStates.waiting_for_click)
async def process_click(message: Message, state: FSMContext, bot: Bot):
    try:
        new_value = float(message.text)
        click_grant[0] = new_value
        await bot.send_message(
            message.chat.id, 
            "‚úÖ <b>–ö–ª–∏–∫</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", 
            parse_mode="HTML"
        )
    except Exception as e:
        await bot.send_message(
            message.chat.id, 
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
            parse_mode="HTML"
        )
    finally:
        await state.clear()

# –ï–∂–µ–¥–Ω–µ–≤–∫–∞
@router.callback_query(F.data == "config_daily")
async def config_daily_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    msg_text = (
        "üìÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ì–∏—Ñ—Ç–∞</b> üìÖ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–∏—Ñ—Ç–∞.\n"
        "–§–æ—Ä–º–∞—Ç: <code>1.5</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>1.5</code>\n\n"
        "<i>üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...</i>"
    )
    await bot.send_message(call.message.chat.id, msg_text, parse_mode="HTML")
    await state.set_state(ConfigStates.waiting_for_daily)

@router.message(ConfigStates.waiting_for_daily)
async def process_daily(message: Message, state: FSMContext, bot: Bot):
    try:
        new_value = float(message.text)
        GIFT_AMOUNT[0] = new_value
        await bot.send_message(
            message.chat.id, 
            "‚úÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ì–∏—Ñ—Ç</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", 
            parse_mode="HTML"
        )
    except Exception as e:
        await bot.send_message(
            message.chat.id, 
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
            parse_mode="HTML"
        )
    finally:
        await state.clear()
@router.callback_query(F.data == "stats")
async def stats_callback(call: CallbackQuery, bot: Bot):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    day_clicker = get_clicks_by_period('day')
    week_clicker = get_clicks_by_period('week')
    month_clicker = get_clicks_by_period('month')

    day_users = get_users_by_period('day')
    week_users = get_users_by_period('week')
    month_users = get_users_by_period('month')

    markup_stats = InlineKeyboardBuilder()
    markup_stats.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adminpanelka")
    markup_stats.adjust(1)
    markup_stats = markup_stats.as_markup()

    await bot.send_message(call.from_user.id, f"""<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üõé –ö–ª–∏–∫–∏:
‚Ä¢ –ó–∞ –¥–µ–Ω—å: {day_clicker}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {week_clicker}
‚Ä¢ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {month_clicker}

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –ó–∞ –¥–µ–Ω—å: {day_users}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {week_users}
‚Ä¢ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {month_users}</b>
""", parse_mode='HTML', reply_markup=markup_stats)


@router.message(F.text == '/why')
async def why_command(message: Message, bot: Bot):
    user_id = message.from_user.id
    await bot.send_message(user_id, f"""<b>üåü –ó–≤–µ–∑–¥—ã ‚Äî</b> <i>–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è</i> –≤–∞–ª—é—Ç–∞ Telegram.

üí° –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 1‚≠êÔ∏è

‚ú® –ó–≤–µ–∑–¥—ã –º–æ–∂–Ω–æ:
- –í—ã–≤–µ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏
- –î–∞—Ä–∏—Ç—å –¥—Ä—É–∑—å—è–º –ø–æ–¥–∞—Ä–∫–∏
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥ –≤ –±–æ—Ç–∞—Ö

<b>üí´ –°—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∞—Å—ã</b>
–ò–Ω–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è ‚è∞!
–í —ç—Ç–æ –≤—Ä–µ–º—è —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å:
‚Ä¢ 2‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ üë´
‚Ä¢ <b>–£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã</b> –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –∏ –∫–ª–∏–∫–∏ –¥–æ <b>0.02</b>‚≠êÔ∏èüìù

‚ú® –°–ª–µ–¥–∏ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å —à–∞–Ω—Å!

<b>üóìÔ∏è –í—ã–≤–æ–¥ –∑–≤–µ–∑–¥</b>
–í—ã–¥–∞—á–∞ –ø–æ–¥–∞—Ä–∫–æ–≤(–∑–≤–µ–∑–¥) –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å—É–±–±–æ—Ç–∞–º –∏ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ.
–ü–æ–¥–∞–≤–∞–π –∑–∞—è–≤–∫—É –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ-–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω—å—à–µ –≤—Å–µ—Ö!

<b>‚òéÔ∏è –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º/—Ä–µ–∫–ª–∞–º–µ/—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É:</b> {admin_username}
""", parse_mode='HTML')


@router.callback_query(F.data.startswith('withdraw:'))
async def handle_withdraw_callback(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    username = call.from_user.username
    if username is None:
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username.", show_alert=True)
        return
    builder_back = InlineKeyboardBuilder()
    builder_back.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    markup_back = builder_back.as_markup()

    stars = call.data.split(':')[1]
    if stars != "premium1" and stars != "premium2":
        emoji = call.data.split(':')[2]
    count_refs = get_weekly_referrals(call.from_user.id)
    try:
        if stars != "premium1" and stars != "premium2":
            stars = int(stars)
        elif stars == "premium1":
            stars = 400
        elif stars == "premium2":
            stars = 1100
        if get_balance_user(call.from_user.id) < stars:
            await bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞!", show_alert=True)
            return
        elif count_refs < refs_boost[0] if user_in_booster(user_id) else count_refs < refs_noboost[0] :
            if user_in_booster(user_id):
                await bot.answer_callback_query(call.id, f"‚ùå –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞–¥–æ –º–∏–Ω–∏–º—É–º {refs_boost[0]} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é! –£ —Ç–µ–±—è {count_refs}", show_alert=True)
                return
            else:
                await bot.answer_callback_query(call.id, f"‚ùå –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞–¥–æ –º–∏–Ω–∏–º—É–º {refs_noboost[0]} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é! –£ —Ç–µ–±—è {count_refs}", show_alert=True)
                return
        else:
            await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
            deincrement_stars(user_id, stars)
            add_withdrawal(user_id, stars)
            if stars == 400:
                for admin in admins_id:
                    button_refs = InlineKeyboardBuilder()
                    button_refs.button(text="üë§ –†–µ—Ñ–µ—Ä–∞–ª–ª—ã", callback_data=f"refferals:{user_id}")
                    markup_adminser = button_refs.as_markup()
                    await bot.send_message(admin, f"<b>‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} | @{username} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ Telegram Premium –Ω–∞ 1 –º–µ—Å—è—Ü</b>", parse_mode='HTML', reply_markup=markup_adminser)
            elif stars == 1100:
                for admin in admins_id:
                    button_refs = InlineKeyboardBuilder()
                    button_refs.button(text="üë§ –†–µ—Ñ–µ—Ä–∞–ª–ª—ã", callback_data=f"refferals:{user_id}")
                    markup_adminser = button_refs.as_markup()                    
                    await bot.send_message(admin, f"<b>‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} | @{username} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ Telegram Premium –Ω–∞ 3 –º–µ—Å—è—Ü–∞</b>", parse_mode='HTML', reply_markup=markup_adminser)
            else:
                for admin in admins_id:
                    balance = get_balance_user(user_id)
                    withdrawed = get_withdrawn(user_id)
                    task_used = get_count_tasks(user_id)
                    all_refs_count = get_count_refs(user_id)
                    clicks_count = get_count_clicks(user_id)
                    button_refs = InlineKeyboardBuilder()
                    button_refs.button(text="üë§ –†–µ—Ñ–µ—Ä–∞–ª–ª—ã", callback_data=f"refferals:{user_id}")
                    markup_adminser = button_refs.as_markup()
                    await bot.send_message(admin, f"<b>‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} | @{username} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ {stars}‚≠êÔ∏è\n\nüí∞ –ë–∞–ª–∞–Ω—Å: <code>{balance}</code>\nüéÅ –í—ã–≤–µ–¥–µ–Ω–æ: <code>{withdrawed}</code>\nüìÑ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: <code>{task_used}</code>\nüë§ –†–µ—Ñ–µ—Ä–∞–ª—ã: <code>{all_refs_count}</code>\n‚úåÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤: <code>{clicks_count}</code></b>", parse_mode='HTML', reply_markup=markup_adminser)
            if stars != 400 and stars != 1100:
                success, id_v = add_withdrawale(username, user_id, stars)
                status = get_status_withdrawal(user_id)
                pizda = await bot.send_message(channel_viplat_id, f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{id_v}</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} | ID {user_id}\nüí´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{stars}</code>‚≠êÔ∏è [{emoji}]\n\nüîÑ –°—Ç–∞—Ç—É—Å: <b>{status}</b>", disable_web_page_preview=True, parse_mode='HTML')
                builder_channel = InlineKeyboardBuilder()
                builder_channel.button(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"paid:{id_v}:{pizda.message_id}:{user_id}:{username}:{stars}:{emoji}")
                builder_channel.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"denied:{id_v}:{pizda.message_id}:{user_id}:{username}:{stars}:{emoji}")
                builder_channel.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", url=f"tg://user?id={user_id}")
                markup_channel = builder_channel.adjust(2, 1).as_markup()
                await bot.edit_message_text(chat_id=pizda.chat.id, message_id=pizda.message_id, text=f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{id_v}</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} | ID {user_id}\nüí´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{stars}</code>‚≠êÔ∏è [{emoji}]\n\nüîÑ –°—Ç–∞—Ç—É—Å: <b>{status}</b>", parse_mode='HTML', reply_markup=markup_channel, disable_web_page_preview=True)
                await bot.send_message(user_id, f"<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ {stars}‚≠êÔ∏è</b>", parse_mode='HTML', reply_markup=markup_back)
            elif stars == 400:
                level_premium = 1
                success, id_v = add_withdrawale(username, user_id, stars)
                status = get_status_withdrawal(user_id)
                pizda = await bot.send_message(channel_viplat_id, f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{id_v}</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} | ID {user_id}\nüéÅ Telegram Premium: 1 –º–µ—Å—è—Ü\n\nüîÑ –°—Ç–∞—Ç—É—Å: <b>{status}</b>", disable_web_page_preview=True, parse_mode='HTML')
                builder_channel = InlineKeyboardBuilder()
                builder_channel.button(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"premium_paid:{id_v}:{pizda.message_id}:{user_id}:{username}:{level_premium}")
                builder_channel.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"premium_denied:{id_v}:{pizda.message_id}:{user_id}:{username}:{level_premium}")
                builder_channel.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", url=f"tg://user?id={user_id}")
                markup_channel = builder_channel.adjust(2, 1).as_markup()
                await bot.edit_message_text(chat_id=pizda.chat.id, message_id=pizda.message_id, text=f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{id_v}</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} | ID {user_id}\nüéÅ Telegram Premium: 1 –º–µ—Å—è—Ü\n\nüîÑ –°—Ç–∞—Ç—É—Å: <b>{status}</b>", disable_web_page_preview=True, parse_mode='HTML', reply_markup=markup_channel)
                await bot.send_message(user_id, f"<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ üéÅ Telegram Premium: 1 –º–µ—Å—è—Ü</b>", parse_mode='HTML', reply_markup=markup_back)
            elif stars == 1100:
                level_premium = 3
                success, id_v = add_withdrawale(username, user_id, stars)
                status = get_status_withdrawal(user_id)
                pizda = await bot.send_message(channel_viplat_id, f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{id_v}</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} | ID {user_id}\nüéÅ Telegram Premium: 3 –º–µ—Å—è—Ü–∞\n\nüîÑ –°—Ç–∞—Ç—É—Å: <b>{status}</b>", disable_web_page_preview=True, parse_mode='HTML')
                builder_channel = InlineKeyboardBuilder()
                builder_channel.button(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"premium_paid:{id_v}:{pizda.message_id}:{user_id}:{username}:{level_premium}")
                builder_channel.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"premium_denied:{id_v}:{pizda.message_id}:{user_id}:{username}:{level_premium}")
                builder_channel.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", url=f"tg://user?id={user_id}")
                markup_channel = builder_channel.adjust(2, 1).as_markup()
                await bot.edit_message_text(chat_id=pizda.chat.id, message_id=pizda.message_id, text=f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{id_v}</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} | ID {user_id}\nüéÅ Telegram Premium: 3 –º–µ—Å—è—Ü–∞\n\nüîÑ –°—Ç–∞—Ç—É—Å: <b>{status}</b>", disable_web_page_preview=True, parse_mode='HTML', reply_markup=markup_channel)
                await bot.send_message(user_id, f"<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ üéÅ Telegram Premium: 3 –º–µ—Å—è—Ü–∞</b>", parse_mode='HTML', reply_markup=markup_back)
    except ValueError:
        await bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞.", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞: {e}")
        await bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥.", show_alert=True)

@router.callback_query(F.data.startswith('refferals'))
async def handle_refferals_callback(call: CallbackQuery, bot: Bot):
    if call.from_user.id not in admins_id:
        return
    
    try:
        _, user_id_str = call.data.split(":")
        user_id = int(user_id_str)
    except (ValueError, IndexError):
        await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data", show_alert=True)
        return

    refferals = get_user_refferals_list_and_username(user_id)
    
    base_data = [
        ("üÜî ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", f"<code>{user_id}</code>"),
        ("üöÄ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", f"{len(refferals)}")
    ]

    html_response = [f"<b>{key}: {value}</b>" for key, value in base_data]
    
    file_lines = [f"{key}: {value}" for key, value in base_data]

    if refferals:
        html_response.append("<b>–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (ID –∏ username):</b>")
        file_lines.append("–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (ID –∏ username):")
        
        for index, (ref_id, username) in enumerate(refferals, 1):
            html_line = f"{index}. ID: {ref_id}, Username: @{username}"
            file_line = f"{index}. ID: {ref_id}, Username: @{username}"
            
            html_response.append(html_line)
            file_lines.append(file_line)
    else:
        html_response.append("<i>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</i>")
        file_lines.append("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")

    html_message = '\n'.join(html_response)
    file_content = '\n'.join(file_lines).encode('utf-8')
    
    try:
        if len(refferals) < 50:
            await call.message.answer(html_message, parse_mode='HTML')
        else:
            document = BufferedInputFile(
                file_content, 
                filename=f'refferals_{user_id}.txt'
            )
            await bot.send_document(
                chat_id=call.from_user.id,
                document=document
            )
        
        await call.answer()
        
    except Exception as e:
        error_msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è" if len(refferals) < 50 else "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞"
        print(f"Error: {e}")
        await call.answer(error_msg, show_alert=True)

@router.callback_query(F.data.startswith('premium_paid'))
async def handle_premium_paid_callback(call: CallbackQuery, bot: Bot):
    if call.from_user.id in admins_id:
        id_v = int(call.data.split(":")[1])
        mesag_id = int(call.data.split(":")[2])
        us_id = int(call.data.split(":")[3])
        us_name = call.data.split(":")[4]
        level_premium = int(call.data.split(":")[5])
        if level_premium == 1:
            await bot.edit_message_text(chat_id=channel_viplat_id, message_id=mesag_id, text=f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{id_v}</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{us_name} | ID: {us_id}\nüéÅ Telegram Premium: 1 –º–µ—Å—è—Ü\n\nüîÑ –°—Ç–∞—Ç—É—Å: <b>–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üéÅ</b>\n\n<b><a href='{channel_osn}'>–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª</a></b> | <b><a href='{chater}'>–ß–∞—Ç</a></b> | <b><a href='{'https://t.me/' + (await bot.me()).username}'>–ë–æ—Ç</a></b>", parse_mode='HTML', disable_web_page_preview=True)
        elif level_premium == 2:
            await bot.edit_message_text(chat_id=channel_viplat_id, message_id=mesag_id, text=f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{id_v}</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{us_name} | ID: {us_id}\nüéÅ Telegram Premium: 3 –º–µ—Å—è—Ü–∞\n\nüîÑ –°—Ç–∞—Ç—É—Å: <b>–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üéÅ</b>\n\n<b><a href='{channel_osn}'>–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª</a></b> | <b><a href='{chater}'>–ß–∞—Ç</a></b> | <b><a href='{'https://t.me/' + (await bot.me()).username}'>–ë–æ—Ç</a></b>", parse_mode='HTML', disable_web_page_preview=True)
    else:
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

@router.callback_query(F.data.startswith('premium_denied'))
async def handle_premium_denied_callback(call: CallbackQuery, bot: Bot):
    if call.from_user.id in admins_id:
        id_v = int(call.data.split(":")[1])
        mesag_id = int(call.data.split(":")[2])
        us_id = int(call.data.split(":")[3])
        us_name = call.data.split(":")[4]
        level_premium = int(call.data.split(":")[5])
        if level_premium == 1:
            await bot.edit_message_text(chat_id=channel_viplat_id, message_id=mesag_id, text=f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{id_v}</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{us_name} | ID: {us_id}\nüéÅ Telegram Premium: 1 –º–µ—Å—è—Ü\n\nüîÑ –°—Ç–∞—Ç—É—Å: <b>–û—Ç–∫–∞–∑–∞–Ω–æ üö´</b>\n\n<b><a href='{channel_osn}'>–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª</a></b> | <b><a href='{chater}'>–ß–∞—Ç</a></b> | <b><a href='{'https://t.me/' + (await bot.me()).username}'>–ë–æ—Ç</a></b>", parse_mode='HTML', disable_web_page_preview=True)
        elif level_premium == 2:
             await bot.edit_message_text(chat_id=channel_viplat_id, message_id=mesag_id, text=f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{id_v}</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{us_name} | ID: {us_id}\nüéÅ Telegram Premium: 3 –º–µ—Å—è—Ü–∞\n\nüîÑ –°—Ç–∞—Ç—É—Å: <b>–û—Ç–∫–∞–∑–∞–Ω–æ üö´</b>\n\n<b><a href='{channel_osn}'>–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª</a></b> | <b><a href='{chater}'>–ß–∞—Ç</a></b> | <b><a href='{'https://t.me/' + (await bot.me()).username}'>–ë–æ—Ç</a></b>", parse_mode='HTML', disable_web_page_preview=True)
    else:
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

@router.callback_query(F.data.startswith('play_game_with_bet'))
async def handle_game_callback(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    try:
        bet = float(call.data.split(':')[1])
        balance = get_balance_user(user_id)

        if balance >= bet:
            deincrement_stars(user_id, bet)

            if random.random() < 0.30:
                coefficients = [0, 0.5, 1, 1.5, 2, 3, 5, 10]
                weights = [0.35, 0.3, 0.2, 0.08, 0.04, 0.02, 0.005, 0.005]
                coefficient = random.choices(coefficients, weights=weights)[0]
                winnings = bet * coefficient

                if coefficient > 0:
                    await bot.answer_callback_query(call.id, f"üéâ –û–ì–†–û–ú–ù–ê–Ø –ü–û–ë–ï–î–ê! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {winnings:.2f}", show_alert=True)
                    chat = await bot.get_chat(user_id)
                    first_name = chat.first_name
                    bot_url = "https://t.me/" + (await bot.me()).username
                    await bot.send_message(
                        id_channel_game,
                        f"<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üèÜ</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name}(ID: <code>{user_id}</code>)\n"
                        f"<i>–≤—ã–∏–≥—Ä–∞–ª</i> <b>{winnings:.2f}</b>‚≠êÔ∏è –Ω–∞ —Å—Ç–∞–≤–∫–µ <b>{bet:.2f}</b>‚≠êÔ∏è üé≤\n\n"
                        f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <i>{coefficient}</i>‚ú®\n\n"
                        f"<b>üéâ –ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π –≤—ã–∏–≥—Ä—ã—à! üèÜ‚ú® üéâ</b>\n\nüéØ –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å! <a href='{bot_url}'>–ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!üçÄ</a>",
                        disable_web_page_preview=True,
                        parse_mode='HTML'
                    )
                    increment_stars(user_id, winnings)
                    new_balance = get_balance_user(user_id)

                    builder_game = InlineKeyboardBuilder()
                    builder_game.button(text="–°—Ç–∞–≤–∫–∞ 0.5‚≠êÔ∏è", callback_data="play_game_with_bet:0.5")
                    builder_game.button(text="–°—Ç–∞–≤–∫–∞ 1‚≠êÔ∏è", callback_data="play_game_with_bet:1")
                    builder_game.button(text="–°—Ç–∞–≤–∫–∞ 2‚≠êÔ∏è", callback_data="play_game_with_bet:2")
                    builder_game.button(text="–°—Ç–∞–≤–∫–∞ 3‚≠êÔ∏è", callback_data="play_game_with_bet:3")
                    builder_game.button(text="–°—Ç–∞–≤–∫–∞ 4‚≠êÔ∏è", callback_data="play_game_with_bet:4")
                    builder_game.button(text="–°—Ç–∞–≤–∫–∞ 5‚≠êÔ∏è", callback_data="play_game_with_bet:5")
                    builder_game.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –º–∏–Ω–∏-–∏–≥—Ä", callback_data="mini_games")
                    markup_game = builder_game.adjust(3, 3, 1).as_markup()

                    input_photo_game = FSInputFile("photos/mini_game.jpg")
                    await bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
                    await bot.send_photo(user_id, photo=input_photo_game, caption=f"<b>üí∞ –£ —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É:</b> {new_balance}‚≠êÔ∏è\n\nüîî –¢—ã –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É '–ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É'. –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É –∏ –ø–æ–ø—ã—Ç–∞–π—Å—è –ø–æ–±–µ–¥–∏—Ç—å! üçÄ\n\nüìä –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π: {channel_link}", parse_mode='HTML', reply_markup=markup_game)
                else:
                    await bot.answer_callback_query(call.id, f"üòî –£–¥–∞—á–∞ –±—ã–ª–∞ –±–ª–∏–∑–∫–æ, –Ω–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 0.\n–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏.", show_alert=True)
                    new_balance = get_balance_user(user_id)
                    builder_game = InlineKeyboardBuilder()
                    builder_game.button(text="–°—Ç–∞–≤–∫–∞ 0.5‚≠êÔ∏è", callback_data="play_game_with_bet:0.5")
                    builder_game.button(text="–°—Ç–∞–≤–∫–∞ 1‚≠êÔ∏è", callback_data="play_game_with_bet:1")
                    builder_game.button(text="–°—Ç–∞–≤–∫–∞ 2‚≠êÔ∏è", callback_data="play_game_with_bet:2")
                    builder_game.button(text="–°—Ç–∞–≤–∫–∞ 3‚≠êÔ∏è", callback_data="play_game_with_bet:3")
                    builder_game.button(text="–°—Ç–∞–≤–∫–∞ 4‚≠êÔ∏è", callback_data="play_game_with_bet:4")
                    builder_game.button(text="–°—Ç–∞–≤–∫–∞ 5‚≠êÔ∏è", callback_data="play_game_with_bet:5")
                    builder_game.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –º–∏–Ω–∏-–∏–≥—Ä", callback_data="mini_games")
                    markup_game = builder_game.adjust(3, 3, 1).as_markup()
                    input_photo_game_lose = FSInputFile("photos/mini_game.jpg")
                    await bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
                    await bot.send_photo(user_id, photo=input_photo_game_lose, caption=f"<b>üí∞ –£ —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É:</b> {new_balance}‚≠êÔ∏è\n\nüîî –¢—ã –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É '–ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É'. –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É –∏ –ø–æ–ø—ã—Ç–∞–π—Å—è –ø–æ–±–µ–¥–∏—Ç—å! üçÄ\n\nüìä –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π: {channel_link}", parse_mode='HTML', reply_markup=markup_game)

            else:
                await bot.answer_callback_query(call.id, f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–≥–æ–¥–Ω—è —É–¥–∞—á–∞ –Ω–µ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ.", show_alert=True)
                new_balance = get_balance_user(user_id)
                builder_game = InlineKeyboardBuilder()
                builder_game.button(text="–°—Ç–∞–≤–∫–∞ 0.5‚≠êÔ∏è", callback_data="play_game_with_bet:0.5")
                builder_game.button(text="–°—Ç–∞–≤–∫–∞ 1‚≠êÔ∏è", callback_data="play_game_with_bet:1")
                builder_game.button(text="–°—Ç–∞–≤–∫–∞ 2‚≠êÔ∏è", callback_data="play_game_with_bet:2")
                builder_game.button(text="–°—Ç–∞–≤–∫–∞ 3‚≠êÔ∏è", callback_data="play_game_with_bet:3")
                builder_game.button(text="–°—Ç–∞–≤–∫–∞ 4‚≠êÔ∏è", callback_data="play_game_with_bet:4")
                builder_game.button(text="–°—Ç–∞–≤–∫–∞ 5‚≠êÔ∏è", callback_data="play_game_with_bet:5")
                builder_game.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –º–∏–Ω–∏-–∏–≥—Ä", callback_data="mini_games")
                markup_game = builder_game.adjust(3, 3, 1).as_markup()
                input_photo_game_no_luck = FSInputFile("photos/mini_game.jpg")
                await bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
                await bot.send_photo(user_id, photo=input_photo_game_no_luck, caption=f"<b>üí∞ –£ —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É:</b> {new_balance}‚≠êÔ∏è\n\nüîî –¢—ã –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É '–ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É'. –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É –∏ –ø–æ–ø—ã—Ç–∞–π—Å—è –ø–æ–±–µ–¥–∏—Ç—å! üçÄ\n\nüìä –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π: {channel_link}", parse_mode='HTML', reply_markup=markup_game)
        else:
            await bot.answer_callback_query(call.id, "üòû –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.", show_alert=True)
    except ValueError:
        await bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏.", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –º–∏–Ω–∏-–∏–≥—Ä–µ: {e}")
        await bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ.", show_alert=True)


@router.callback_query(F.data.startswith('task_check'))
async def handle_task_callback(call: CallbackQuery, bot: Bot):
    try:
        _, reward, task_id_str, chat_id = call.data.split(":")
        task_id = int(task_id_str)
        user_id = call.from_user.id
        reward = float(reward)
        completed_task = get_completed_tasks_for_user(user_id)
        if task_id in completed_task:
            await bot.answer_callback_query(call.id, "‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.", show_alert=True)
            return

        try:
            all_stars = str(sum_all_stars())
            withdrawed = str(sum_all_withdrawn())
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            all_stars = "–û—à–∏–±–∫–∞"
            withdrawed = "–û—à–∏–±–∫–∞"
        if chat_id != "None":
            try:
                chat_member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
                if chat_member.status not in ['member', 'administrator', 'creator']:
                    await bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")
                    return
            except Exception as e:
                print(f"error in check subs in tasks: {e}")
        await bot.answer_callback_query(call.id, f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ù–∞—á–∏—Å–ª–µ–Ω–æ: {reward}‚≠êÔ∏è")
        increment_current_completed(task_id)
        complete_task_for_user(user_id, task_id)
        increment_stars(user_id, reward)
        await bot.delete_message(chat_id=user_id, message_id=call.message.message_id)

        builder_start = InlineKeyboardBuilder()
        buttons = [
            ('‚ú® –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'click_star'),
            ('üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã', 'mini_games'),
            ('üîó –†–µ—Ñ–µ—Ä–∞–ª—ã', 'earn_stars'),
            ('üîÑ –í—ã–≤–µ—Å—Ç–∏', 'withdraw_stars_menu'),
            ('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'my_balance'),
            ('üìù –ó–∞–¥–∞–Ω–∏—è', 'tasks'),
            ('üìò –ì–∞–π–¥—ã | FAQ', 'faq'),
            ('üöÄ –ë—É—Å—Ç', 'donate'),
            ('üèÜ –¢–æ–ø', 'leaders')
        ]
        for text, callback_data in buttons:
            builder_start.button(text=text, callback_data=callback_data)
        if beta_url and beta_name:
            builder_start.button(text=beta_name, url=beta_url)
        builder_start.adjust(1, 1, 2, 2, 2, 2, 1)
        markup_start = builder_start.as_markup()

        photo = FSInputFile("photos/start.jpg")
        await bot.send_photo(
            chat_id=user_id,
            photo=photo,
            caption=(
                f"<b>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ú®</b>\n\n"
                f"<b>üåü –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{all_stars[:all_stars.find('.') + 2] if '.' in all_stars else all_stars}</code>‚≠êÔ∏è</b>\n"
                f"<b>‚ôªÔ∏è –í—Å–µ–≥–æ –æ–±–º–µ–Ω—è–ª–∏: <code>{withdrawed[:withdrawed.find('.') + 2] if '.' in withdrawed else withdrawed}</code>‚≠êÔ∏è</b>\n\n"
                "<b>–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã?</b>\n"
                "<blockquote>üî∏ <i>–ö–ª–∏–∫–∞–π, —Å–æ–±–∏—Ä–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –≤–≤–æ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã</i>\n"
                "‚Äî –≤—Å—ë —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª.\n"
                "üî∏ <i>–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π</i>\n"
                "üî∏ <i>–ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö</i>\n"
                "‚Äî –≤—Å—ë —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.</blockquote>"
            ),
            parse_mode='HTML',
            reply_markup=markup_start
        )
        # await bot.send_message(user_id, f"<b>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ñ–µ—Ä–º—É –∑–≤—ë–∑–¥! ‚ú®</b>\n\nüè¶ <b>–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {all_stars[:all_stars.find('.') + 2] if '.' in all_stars else all_stars}‚≠êÔ∏è\nüí∏ <b>–í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ:</b> {withdrawed[:withdrawed.find('.') + 2] if '.' in withdrawed else withdrawed}‚≠êÔ∏è\n\n–¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É, –≥–¥–µ –∑–≤–µ–∑–¥—ã Telegram –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! ‚≠êÔ∏è\n<b>–ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π ‚Äî —Ç–µ–º –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥!</b>\n\n<b>üöÄ –ö–∞–∫ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π?</b>\n‚Ä¢ –ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –≤ –õ–° üë•\n‚Ä¢ –†–∞–∑–º–µ—Å—Ç–∏ –µ—ë –≤ —Å–≤–æ—ë–º Telegram-–∫–∞–Ω–∞–ª–µ üì¢\n‚Ä¢ –ù–∞–ø–∏—à–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö üó®Ô∏è\n‚Ä¢ –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö (TikTok, Instagram, WhatsApp –∏ –¥—Ä.) üåç", parse_mode='HTML', reply_markup=markup_start)
    except ValueError:
        await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_task: {e}")
        await bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è.")

@router.callback_query(F.data == 'click_star')
async def click_star_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = call.from_user.id
    current_time = time.time()

    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    first_name = call.from_user.first_name
    language_code = call.from_user.language_code
    is_premium = getattr(call.from_user, 'is_premium', None)

    if chat_id not in admins_id:
        response = await request_op(
                user_id=user_id,
                chat_id=chat_id,
                first_name=first_name,
                language_code=language_code,
                bot=bot,
                ref_id=None,
                is_premium=is_premium
            )

        if response != 'ok':
            return

    try:
        last_click_time_db = get_last_click_time(user_id)
        if last_click_time_db:
            time_since_last_click = current_time - last_click_time_db
            if time_since_last_click < DELAY_TIME:
                remaining_time = DELAY_TIME - time_since_last_click
                await bot.answer_callback_query(call.id, f"‚åõÔ∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {int(remaining_time)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–ª–∏–∫–æ–º.", show_alert=True)
                return
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–ª–∏–∫–∞: {e}")
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    try:
        click_count = get_count_clicks(user_id)
        if click_count % 5 == 0:
            await bot.answer_callback_query(call.id, "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±–æ—Ç–∞.")
            if call.message:
                await bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
            else:
                logging.warning("call.message is None, cannot delete message.")

            vegetables_emojis = ['ü•ï', 'üçÖ', 'üçÜ', 'ü•î', 'ü•¶', 'ü•¨', 'ü•í', 'üßÖ', 'üåΩ', 'üå∂Ô∏è']
            correct_vegetable = random.choice(vegetables_emojis)
            other_vegetables = random.sample([v for v in vegetables_emojis if v != correct_vegetable], 2)
            options = [correct_vegetable] + other_vegetables
            random.shuffle(options)
            markup_captcha = InlineKeyboardBuilder()
            for option in options:
                markup_captcha.button(text=option, callback_data=f'veg_{option}')
            markup_captcha.adjust(3)
            await bot.send_message(user_id, f"<b>–û—Ç–≤–µ—Ç –Ω–∞ –∫–∞–ø—á—É: {correct_vegetable}</b>", reply_markup=markup_captcha.as_markup(), parse_mode='HTML')
            await state.update_data(captcha_correct_answer=correct_vegetable)
            await state.set_state(CaptchaClick.waiting_click_captcha)
            return

        update_last_click_time(user_id)

        if user_exists(user_id):
            random_value = click_grant[0]
            reward = random_value * 2.5 if user_in_booster(user_id) else random_value
            increment_stars(user_id, reward)
            update_click_count(user_id)

            await bot.answer_callback_query(call.id, f"üéâ –¢—ã –ø–æ–ª—É—á–∏–ª {reward}‚≠êÔ∏è", show_alert=True)
        else:
            await bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.", show_alert=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞: {e}, type: {type(e)}")
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∑–≤–µ–∑–¥ –∑–∞ –∫–ª–∏–∫.", show_alert=True)

@router.callback_query(F.data.startswith('veg_'))
async def handle_captcha_click(call: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = call.from_user.id
    user_answer = call.data.split('_')[1]
    
    data = await state.get_data()
    correct_answer = data.get('captcha_correct_answer')
    
    if correct_answer is None:
        logging.error(f"–û—à–∏–±–∫–∞: captcha_correct_answer –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.", show_alert=True)
        await state.clear()
        return
    
    if correct_answer == user_answer:
        update_last_click_time(user_id)
        if user_exists(user_id):
            random_value = click_grant[0]
            await bot.answer_callback_query(call.id, f"üí´ –í—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±–æ—Ç–∞\nüéâ –¢—ã –ø–æ–ª—É—á–∏–ª(–∞) {random_value * 2.5 if user_in_booster(user_id) else random_value}‚≠êÔ∏è", show_alert=True)
            increment_stars(user_id, random_value * 2.5 if user_in_booster(user_id) else random_value)
            update_click_count(user_id)
            await bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
            await send_main_menu(user_id, bot)
            await state.clear()
        else:
            await bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.", show_alert=True)
            await state.clear()
    else:
        await bot.answer_callback_query(call.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!", show_alert=True)

@router.callback_query(F.data == "users_check")
async def users_check_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminState.USERS_CHECK)

@router.callback_query(F.data == "add_stars")
async def admin_add_stars_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.send_message(call.from_user.id, "–î–ª—è –≤—ã–¥–∞—á–∏ –∑–≤–µ–∑–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å ID:–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥.\n–ü—Ä–∏–º–µ—Ä: 123:5")
    await state.set_state(AdminState.ADD_STARS)


@router.callback_query(F.data == "remove_stars")
async def admin_remove_stars_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.send_message(call.from_user.id, "–î–ª—è —Å–Ω—è—Ç–∏—è –∑–≤–µ–∑–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å ID:–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥.\n–ü—Ä–∏–º–µ—Ä: 123:5")
    await state.set_state(AdminState.REMOVE_STARS)

@router.message(AdminState.REMOVE_STARS)
async def admin_remove_stars_process(message: types.Message, bot: Bot, state: FSMContext):
    try:
        user_id, stars = map(int, message.text.split(':'))
        deincrement_stars(user_id, stars)
        await bot.send_message(message.from_user.id, f"–ó–≤–µ–∑–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –∑–≤–µ–∑–¥: {e}")
        await bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 123:5")

@router.callback_query(F.data.startswith("subgram-task"))
async def subgram_task_callback(call: CallbackQuery, bot: Bot):
    try:
        user = call.from_user
        user_id = user.id
        sponsor_count = int(call.data.split(":")[1])

        response = await request_task(user_id=user_id, chat_id=call.message.chat.id, first_name=user.first_name, language_code=user.language_code, bot=bot)
        # await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        if response != 'ok':
            await bot.answer_callback_query(call.id, "‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
            return
        
        links = [button.url for row in call.message.reply_markup.inline_keyboard for button in row if button.url]
        
        all_links_id = get_urls_by_id(user_id)
        count_checker = 0
        for url in links:
            if url in all_links_id:
                count_checker += 1

        if count_checker == sponsor_count:
            await bot.answer_callback_query(call.id, '–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ', show_alert=True)
            return

        for url in links:
            add_url(user_id, url)

        await bot.answer_callback_query(call.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É üëç', show_alert=True)
        increment_stars(user_id, task_grant[0])
        increment_counter_tasks(user_id, sponsor_count)
        await bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        await send_main_menu(user_id, bot)
        

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.", show_alert=True)

@router.callback_query(F.data.startswith("subgram-op"))
async def subgram_op_callback(call: CallbackQuery, bot: Bot):
    try:
        user = call.from_user
        user_id = user.id
        ref_id = None
        
        args = call.data.split(':')
        if len(args) > 1 and args[1].isdigit():
            ref_id = int(args[1])
        elif len(args) > 1:
            ref_id = args[1]

        response = await request_op(
            user_id=user_id,
            chat_id=call.message.chat.id,
            first_name=user.first_name,
            language_code=user.language_code,
            bot=bot,
            ref_id=ref_id,
            is_premium=getattr(user, 'is_premium', None)
        )

        if response != 'ok':
            await bot.answer_callback_query(call.id, "‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
            return

        await bot.answer_callback_query(call.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É üëç', show_alert=True)


        if not user_exists(user_id):
            try:
                urls_utm = get_urls_utm()
                for url in urls_utm:
                    url_title = url.split('=')[1]
                    if ref_id == url_title:
                        users_add_utm(url)
                        users_add_utm_op(url)
                        ref_id = None
                        break
                add_user(user_id, user.username, ref_id)
                await handle_referral_bonus(ref_id, user_id, bot)
            except Exception as e:
                logging.error(f"User registration error: {e}")

        await send_main_menu(user_id, bot)

    except Exception as e:
        logging.error(f"Subgram op error: {e}", exc_info=True)
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)

async def handle_referral_bonus(ref_id: Optional[int], new_user_id: int, bot: Bot):
    if not ref_id or not user_exists(ref_id):
        return

    try:
        increment_referrals(ref_id)
        c_refs = get_user_referrals_count(ref_id)
        if c_refs < 50:
            nac = nac_1[0] * 2 if user_in_booster(ref_id) else nac_1[0]
            increment_stars(ref_id, nac)
        elif 50 <= c_refs < 250:
            nac = nac_2[0] * 2 if user_in_booster(ref_id) else nac_2[0]
            increment_stars(ref_id, nac)
        else:
            nac = nac_3[0] * 2 if user_in_booster(ref_id) else nac_3[0]
            increment_stars(ref_id, nac)
        new_ref_link = f"https://t.me/{(await bot.me()).username}?start={ref_id}"
        await bot.send_message(
                ref_id,
                f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{new_user_id}</code> –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n"
                f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ +{nac}‚≠êÔ∏è –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞.\n"
                f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –µ—â—ë —Ä–∞–∑:\n<code>{new_ref_link}</code>",
                parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"Referral bonus error: {e}")

async def send_main_menu(user_id: int, bot: Bot):
    try:
        total_stars = sum_all_stars()
        total_withdrawn = sum_all_withdrawn()
        stars_str = f"{total_stars:.2f}" if isinstance(total_stars, float) else str(total_stars)
        withdrawn_str = f"{total_withdrawn:.2f}" if isinstance(total_withdrawn, float) else str(total_withdrawn)

        builder = InlineKeyboardBuilder()
        builder.add(
            *[
                InlineKeyboardButton(text='‚ú® –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã', callback_data='click_star'),
                InlineKeyboardButton(text='üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã', callback_data='mini_games'),
                InlineKeyboardButton(text='üîó –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data='earn_stars'),
                InlineKeyboardButton(text='üîÑ –í—ã–≤–µ—Å—Ç–∏', callback_data='withdraw_stars_menu'),
                InlineKeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data='my_balance'),
                InlineKeyboardButton(text='üìù –ó–∞–¥–∞–Ω–∏—è', callback_data='tasks'),
                InlineKeyboardButton(text='üìò –ì–∞–π–¥—ã | FAQ', callback_data='faq'),
                InlineKeyboardButton(text='üöÄ –ë—É—Å—Ç', callback_data='donate'),
                InlineKeyboardButton(text='üèÜ –¢–æ–ø', callback_data='leaders')
            ]
        )
        
        if beta_url and beta_name:
            builder.add(InlineKeyboardButton(text=beta_name, url=beta_url))
            
        builder.adjust(1, 1, 2, 2, 2, 1)

        photo = FSInputFile("photos/start.jpg")
        await bot.send_photo(
            chat_id=user_id,
            photo=photo,
            caption=(
                "<b>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ú®</b>\n\n"
                f"<b>üåü –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{stars_str}</code>‚≠êÔ∏è</b>\n"
                f"<b>‚ôªÔ∏è –í—Å–µ–≥–æ –æ–±–º–µ–Ω—è–ª–∏: <code>{withdrawn_str}</code>‚≠êÔ∏è</b>\n\n"
                "<b>–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã?</b>\n"
                "<blockquote>üî∏ –ö–ª–∏–∫–∞–π, —Å–æ–±–∏—Ä–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –≤–≤–æ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã\n"
                "‚Äî –≤—Å—ë —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª.\n"
                "üî∏ –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π\n"
                "üî∏ –ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö\n"
                "‚Äî –≤—Å—ë —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.</blockquote>"
            ),
            parse_mode='HTML',
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logging.error(f"Main menu send error: {e}")

@router.callback_query(F.data == "mailing")
async def admin_mailing_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(AdminState.MAILING)


@router.callback_query(F.data == "add_promo_code")
async def admin_add_promo_code_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:–Ω–∞–≥—Ä–∞–¥–∞:–º–∞–∫—Å. –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")
    await state.set_state(AdminState.ADD_PROMO_CODE)


@router.callback_query(F.data == "remove_promo_code")
async def admin_remove_promo_code_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    await state.set_state(AdminState.REMOVE_PROMO_CODE)


@router.callback_query(F.data == "add_task")
async def admin_add_task_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(AdminState.ADD_TASK)

@router.callback_query(F.data == "top_balance")
async def admin_top_balance_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    top_users_data = get_top_balance()
    text_balance = "<b>üèÜ –¢–æ–ø-50 –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>\n\n"
    for index, user_data in enumerate(top_users_data):
        username = user_data[0]
        balance = user_data[1]
        if isinstance(balance, float):
            balance_formatted = f"{balance:.2f}" 
        else:
            balance_formatted = str(balance)
        text_balance += f"<b>{index + 1}. @{username}</b> - <code>{balance_formatted}</code> ‚≠êÔ∏è\n"
    await bot.send_message(call.from_user.id, text_balance, parse_mode='HTML')


@router.callback_query(F.data == "remove_task")
async def admin_remove_task_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(AdminState.REMOVE_TASK)


@router.callback_query(F.data == "add_channel")
async def admin_add_channel_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞:")
    await state.set_state(AdminState.ADD_CHANNEL)


@router.callback_query(F.data == "remove_channel")
async def admin_remove_channel_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞:")
    await state.set_state(AdminState.REMOVE_CHANNEL)


@router.callback_query(F.data.startswith("paid"))
async def paid_callback(call: CallbackQuery, bot: Bot):
    if call.from_user.id in admins_id:
        id_v = int(call.data.split(":")[1])
        mesag_id = int(call.data.split(":")[2])
        us_id = int(call.data.split(":")[3])
        us_name = call.data.split(":")[4]
        strs = int(call.data.split(":")[5])
        emoji = call.data.split(":")[6]
        await bot.edit_message_text(chat_id=channel_viplat_id, message_id=mesag_id, text=f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{id_v}</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{us_name} | ID: {us_id}\nüí´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{strs}</code>‚≠êÔ∏è [{emoji}]\n\nüîÑ –°—Ç–∞—Ç—É—Å: <b>–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üéÅ</b>\n\n<b><a href='{channel_osn}'>–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª</a></b> | <b><a href='{chater}'>–ß–∞—Ç</a></b> | <b><a href='{'https://t.me/' + (await bot.me()).username}'>–ë–æ—Ç</a></b>", parse_mode='HTML', disable_web_page_preview=True)
    else:
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")


async def safe_edit_message(bot, chat_id, message_id, new_text, reply_markup=None):
    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=new_text,
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_markup=reply_markup
        )
    except TelegramBadRequest as e:
        print("error")
        if "message is not modified" not in str(e):
            raise

@router.callback_query(F.data.startswith("denied"))
async def denied_callback(call: CallbackQuery, bot: Bot):
    if call.from_user.id in admins_id:
        data = call.data.split(":")
        id_v, mesag_id, us_id, us_name, strs, emoji = map(str, data[1:7])

        reason_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé∞ –ù–∞–∫—Ä—É—Ç–∫–∞", callback_data=f"balk:{id_v}:{mesag_id}:{us_id}:{us_name}:{strs}:{emoji}:narkutka")],
            [InlineKeyboardButton(text="üé´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ª–æ–≤–∏—è –≤—ã–≤–æ–¥–∞", callback_data=f"balk:{id_v}:{mesag_id}:{us_id}:{us_name}:{strs}:{emoji}:usloviya")],
            [InlineKeyboardButton(text="‚ùå –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data=f"balk:{id_v}:{mesag_id}:{us_id}:{us_name}:{strs}:{emoji}:black_list")],
            [InlineKeyboardButton(text="‚ö†Ô∏è –ë–∞–≥–∞—é–∑", callback_data=f"balk:{id_v}:{mesag_id}:{us_id}:{us_name}:{strs}:{emoji}:bagous")]
        ])

        text = (
            f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{id_v}</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{us_name} | ID: {us_id}\n"
            f"üí´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{strs}</code>‚≠êÔ∏è [{emoji}]\n\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: <b>–û—Ç–∫–∞–∑–∞–Ω–æ üö´</b>\n\n"
            f"<b><a href='{channel_osn}'>–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª</a></b> | "
            f"<b><a href='{chater}'>–ß–∞—Ç</a></b> | "
            f"<b><a href='{'https://t.me/' + (await bot.me()).username}'>–ë–æ—Ç</a></b>"
        )

        await safe_edit_message(bot, channel_viplat_id, int(mesag_id), text, reason_markup)
    else:
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

@router.callback_query(F.data.startswith("balk"))
async def denied_reason_callback(call: CallbackQuery, bot: Bot):
    # print(1)
    if call.from_user.id in admins_id:
        # print("called")
        data = call.data.split(":")
        id_v, mesag_id, us_id, us_name, strs, emoji, reason = map(str, data[1:8])

        reasons = {
            "narkutka": "üé∞ –ù–∞–∫—Ä—É—Ç–∫–∞",
            "usloviya": "üé´ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª/—á–∞—Ç",
            "black_list": "‚ùå –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
            "bagous": "‚ö†Ô∏è –ë–∞–≥–∞—é–∑"
        }

        reason_text = reasons.get(reason, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞")

        text = (
            f"<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{id_v}</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{us_name} | ID: {us_id}\n"
            f"üí´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{strs}</code>‚≠êÔ∏è [{emoji}]\n\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: <b>–û—Ç–∫–∞–∑–∞–Ω–æ üö´</b>\n"
            f"‚ö†Ô∏è–ü—Ä–∏—á–∏–Ω–∞: {reason_text} \u200B\n\n"
            f"<b><a href='{channel_osn}'>–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª</a></b> | "
            f"<b><a href='{chater}'>–ß–∞—Ç</a></b> | "
            f"<b><a href='{'https://t.me/' + (await bot.me()).username}'>–ë–æ—Ç</a></b>"
        )

        await safe_edit_message(bot, channel_viplat_id, int(mesag_id), text, None)
    else:
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")


@router.callback_query(F.data == "donate")
async def donate_callback(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    user_is_boost = user_in_booster(call.from_user.id)
    if user_is_boost:
        await bot.answer_callback_query(call.id, f"‚ö†Ô∏è –£ –≤–∞—Å –∏ —Ç–∞–∫ –µ—Å—Ç—å –±—É—Å—Ç.")
        return
    await bot.delete_message(call.from_user.id, call.message.message_id)
    prices = [LabeledPrice(label="XTR", amount=boost_cost[0])]
    builder_donate = InlineKeyboardBuilder()
    builder_donate.button(text=f"–ó–∞–ø–ª–∞—Ç–∏—Ç—å ‚≠ê{boost_cost[0]}", pay=True)
    builder_donate.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    markup_donate = builder_donate.adjust(1).as_markup()

    description = (
        "‚ú® –ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã!"
        "                                                       "
        "üåü –ú–Ω–æ–∂–∏—Ç–µ–ª—å x2.5 –∫ –∫–ª–∏–∫–∞–º –Ω–∞ 15 –¥–Ω–µ–π."
        "                                                       "
        "ü§ù –ú–Ω–æ–∂–∏—Ç–µ–ª—å x2 –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–∞ 15 –¥–Ω–µ–π."
    )
    await bot.send_invoice(call.from_user.id, title='–î–æ–Ω–∞—Çüíõ ', description=description, prices=prices, provider_token="", payload="channel_support", currency="XTR", reply_markup=markup_donate)

@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):  
    await pre_checkout_query.answer(ok=True)

@router.message(F.content_type == 'successful_payment')
async def successful_payment_handler(message: Message, bot: Bot):
    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
        payment_info = message.successful_payment
        user_id = message.from_user.id
        username = message.from_user.username if message.from_user.username else "–ù–µ—Ç—É"
        amount = payment_info.total_amount
        currency = payment_info.currency
        if currency == "XTR":
            currency = "‚≠êÔ∏è"
        
        current_time = datetime.now()
        delta = timedelta(days=15)
        future_time = current_time + delta
        future_timestamp = future_time.timestamp()

        add_or_update_user_boost(user_id, future_timestamp)
        time_until_normal = datetime.fromtimestamp(future_timestamp)
        
        for admin in admins_id:
            await bot.send_message(
                admin,
                f"<b>‚ù§Ô∏è –ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç—ë–∂.\n\n‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ:\nüÜî –ê–π–¥–∏: {user_id}\nüöπ Username: {username if username else None}\nüí∞ –ü–æ–ª—É—á–µ–Ω–æ: {amount} {currency}</b>",
                parse_mode='HTML'
            )
        
        await bot.send_message(
            user_id,
            f"<b>‚ù§Ô∏è –ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç—ë–∂.\n\n‚ú® –ë—É—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 15 –¥–Ω–µ–π.</b>\n\n<i>–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ –±—É—Å—Ç–∞ –¥–æ: {time_until_normal}</i>",
            parse_mode='HTML'
        )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await bot.send_message(user_id, "<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>", parse_mode='HTML')

@router.callback_query(F.data == "info_added_channels")
async def info_added_channels_callback(call: CallbackQuery, bot: Bot):
    text = "‚öôÔ∏è <b>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
    if len(required_subscription) == 0:
        text += "<b>–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤</b>\n"
    else:
        for index, channel_id in enumerate(required_subscription, start=1):
            try:
                text += f"<b>{index}. ID: <code>{channel_id}</code></b>\n"
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
    await bot.send_message(call.from_user.id, text, parse_mode='HTML')


@router.callback_query(F.data.startswith("check_subs"))
async def check_subs_callback(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    refferal_id = None
    try:
        refferal_id = int(call.data.split(":")[1])
    except IndexError:
        pass

    if await check_subscription(user_id, required_subscription, bot, refferal_id=refferal_id):
        if not user_exists(user_id):
            add_user(user_id, call.from_user.username, refferal_id)
            if refferal_id is not None:
                c_refs = get_user_referrals_count(refferal_id)
                if c_refs < 50:
                    nac = nac_1[0] * 2 if user_in_booster(refferal_id) else nac_1[0]
                    increment_stars(refferal_id, nac)
                elif 50 <= c_refs < 250:
                    nac = nac_2[0] * 2 if user_in_booster(refferal_id) else nac_2[0]
                    increment_stars(refferal_id, nac)
                else:
                    nac = nac_3[0] * 2 if user_in_booster(refferal_id) else nac_3[0]
                    increment_stars(refferal_id, nac)
                increment_referrals(refferal_id)
                new_ref_link = f"https://t.me/{ (await bot.me()).username }?start={refferal_id}"
                await bot.send_message(
                    refferal_id,
                    f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n"
                    f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ +{nac}‚≠êÔ∏è –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞.\n"
                    f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –µ—â—ë —Ä–∞–∑:\n<code>{new_ref_link}</code>",
                    parse_mode='HTML'
                )
                await bot.answer_callback_query(call.id, "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!")
                builder_new_markup = InlineKeyboardBuilder()
                builder_new_markup.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
                new_markup = builder_new_markup.as_markup()
                await bot.send_message(user_id, "<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.</b>", parse_mode='HTML', reply_markup=new_markup)
        else:
            await bot.answer_callback_query(call.id, "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!")
            builder_new_markup = InlineKeyboardBuilder()
            builder_new_markup.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
            new_markup = builder_new_markup.as_markup()
            await bot.send_message(user_id, "<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.</b>", parse_mode='HTML', reply_markup=new_markup)
    else:
        await bot.answer_callback_query(call.id, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


@router.callback_query(F.data == "mini_games")
async def mini_games_callback(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    user_id = call.from_user.id
    chat_id = call.message.chat.id
    first_name = call.from_user.first_name
    language_code = call.from_user.language_code
    is_premium = getattr(call.from_user, 'is_premium', None)


    if chat_id not in admins_id:
        response = await request_op(
                user_id=user_id,
                chat_id=chat_id,
                first_name=first_name,
                language_code=language_code,
                bot=bot,
                ref_id=None,
                is_premium=is_premium
            )

        if response != 'ok':
            return
    builder_games = InlineKeyboardBuilder()
    builder_games.button(text="[üî•] –ö—Ä–∞–∂–∞ –∑–≤–µ–∑–¥ üí∞", callback_data="theft_game")
    builder_games.button(text="[üî•] –ö–ù–ë ‚úä‚úåÔ∏èüñê", callback_data="knb_game")
    builder_games.button(text="–õ–æ—Ç–µ—Ä–µ—è üé∞", callback_data="lottery_game")
    builder_games.button(text="–í—Å–µ –∏–ª–∏ –Ω–∏—á–µ–≥–æ üé≤", callback_data="play_game")
    builder_games.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    markup_games = builder_games.adjust(1, 1, 2, 1).as_markup()

    with open('photos/mini_game.jpg', 'rb') as photo:
        input_photo_minigames = FSInputFile("photos/mini_game.jpg")
        await bot.send_photo(call.from_user.id, photo=input_photo_minigames, caption="<b>üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã!</b> –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:\n\n<b>1Ô∏è‚É£ –ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É</b> ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–æ–±–µ–¥–∏—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏!\n<b>2Ô∏è‚É£ –õ–æ—Ç–µ—Ä–µ—è</b> ‚Äî –∫—É–ø–∏ –±–∏–ª–µ—Ç –∏ –≤—ã–∏–≥—Ä–∞–π –º–Ω–æ–≥–æ –∑–≤–µ–∑–¥!\n<b>3Ô∏è‚É£ –ö–ù–ë</b> ‚Äî –∫–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞\n<b>4Ô∏è‚É£ –ö—Ä–∞–∂–∞ –∑–≤—ë–∑–¥</b> ‚Äî —É–∫—Ä–∞–¥–∏ –∑–≤—ë–∑–¥—ã —É —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π!", reply_markup=markup_games, parse_mode='HTML')

def generate_password(length: int) -> str:
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for _ in range(length))

async def send_progress_bar(bot, chat_id, message_id):
    progress_template = ["‚¨úÔ∏è"] * 10
    for i in range(10):
        progress_template[i] = "üü©"
        progress_bar = "".join(progress_template)
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"<b>[{progress_bar}]</b>\n\nüîë –ö—Ä–∞–∂–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...",
            parse_mode="HTML"
        )
        await asyncio.sleep(0.5)

@router.callback_query(F.data == "theft_game")
async def theft_game_starter(call: CallbackQuery, bot: Bot, state: FSMContext):

    user_id = call.from_user.id
    balance = get_balance_user(user_id)
    
    if balance < 10.0:
        await bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥!\n\n–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ 10 –∑–≤—ë–∑–¥.", show_alert=True)
        return
    
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    builder_theft = InlineKeyboardBuilder()
    builder_theft.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –º–∏–Ω–∏-–∏–≥—Ä", callback_data="mini_games")
    markup_theft = builder_theft.as_markup()
    
    input_photo_minigames = FSInputFile("photos/mini_game.jpg")
    await bot.send_photo(
        call.from_user.id,
        photo=input_photo_minigames,
        caption=(
            "<b>üïπ –í—ã –≤–æ—à–ª–∏ –≤ –º–∏–Ω–∏-–∏–≥—Ä—É –ö—Ä–∞–∂–∞ –∑–≤—ë–∑–¥</b>\n\n"
            "<blockquote><b>üéÆ –°—É—Ç—å –∏–≥—Ä—ã: </b>\n"
            "<i>–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ Username —á–µ–ª–æ–≤–µ–∫–∞, —É –≤–∞—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫—Ä–∞–∂–∞ –µ–≥–æ Stars-–ö–æ—à–µ–ª—å–∫–∞, "
            f"–ø—Ä–∏ —É–¥–∞—á–Ω–æ–π –∫—Ä–∞–∂–µ ‚Äî –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 20% –±–∞–ª–∞–Ω—Å–∞ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞</i>\nüìä –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–∞–∂: {channel_link}</blockquote>\n\n"
            "<blockquote><b>üòä –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤–≤–µ–¥–∏—Ç–µ Username —á–µ–ª–æ–≤–µ–∫–∞</b></blockquote>"
        ),
        parse_mode='HTML',
        reply_markup=markup_theft
    )
    await state.set_state(TheftGame.waiting_username)

@router.message(TheftGame.waiting_username)
async def theft_game_username(message: Message, bot: Bot, state: FSMContext):
    username = message.text.lstrip('@')
    if username == message.from_user.username:
        await bot.send_message(message.from_user.id, "üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å–∞–º —Å —Å–æ–±–æ–π.")
        await state.clear()
        return

    user_id = get_id_from_username(username)
    if user_id is None:
        await bot.send_message(message.from_user.id, "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω.")
        await state.clear()
        return
    
    balance = get_balance_user(user_id)
    if balance <= 1.0:
        await bot.send_message(message.from_user.id, "üö´ Stars-–ö–æ—à–µ–ª–µ–∫ –Ω–µ –∏–º–µ–µ—Ç –±–æ–ª—å—à–µ 1 –∑–≤–µ–∑–¥—ã! –ö—Ä–∞–∂–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        await state.clear()
        return
    
    player_balance = get_balance_user(message.from_user.id)
    if player_balance >= 10:
        deincrement_stars(message.from_user.id, 10)
    else:
        await bot.send_message(message.from_user.id, "üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥!")
        await state.clear()
        return

    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    
    sent_message = await bot.send_message(
        message.from_user.id,
        "<b>[‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è]</b>\n\nüîë –ö—Ä–∞–∂–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...",
        parse_mode="HTML"
    )

    await send_progress_bar(bot, message.from_user.id, sent_message.message_id)

    password = generate_password(random.randint(5, 10))
    success = random.random() < 0.15

    builder_theft = InlineKeyboardBuilder()
    builder_theft.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –º–∏–Ω–∏-–∏–≥—Ä", callback_data="mini_games")
    markup_theft = builder_theft.as_markup()

    if success:
        stolen_amount = round(balance * 0.2, 2)
        deincrement_stars(user_id, stolen_amount)
        increment_stars(message.from_user.id, stolen_amount + 10)

        await bot.edit_message_text(
            chat_id=message.from_user.id,
            message_id=sent_message.message_id,
            text=(
                f"<b>[{'üü©' * 10}]</b>\n\n"
                f"<b>‚úÖ –ö—Ä–∞–∂–∞ —É–¥–∞–ª–∞—Å—å!</b>\n"
                f"<blockquote>üîë –ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω: <code>{password}</code>\n"
                f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {stolen_amount} ‚≠ê –æ—Ç @{username}!</blockquote>"
            ),
            parse_mode="HTML",
            reply_markup=markup_theft
        )

        await bot.send_message(
            chat_id=user_id,
            text=(
                f"<b>üòµ –û –Ω–µ—Ç! –£ –≤–∞—Å —É–∫—Ä–∞–ª–∏ –∑–≤—ë–∑–¥—ã!</b>\n\n"
                f"<blockquote><b>üí∞ –° –≤–∞—à–µ–≥–æ Stars-–ö–æ—à–µ–ª—å–∫–∞ —Å–ø–∏—Å–∞–ª–∏</b> <code>{stolen_amount}</code> ‚≠ê\n"
                f"<b>üë§ –í–æ—Ä: @{message.from_user.username}</b></blockquote>"
            ),
            parse_mode='HTML'
        )

        await bot.send_message(
            chat_id=id_channel_game,
            text=(
                f"<b>ü•∑üèª–°—Ä–µ–¥–∏ –Ω–∞—Å –ø–æ—è–≤–∏–ª—Å—è –≤–æ—Ä!</b>"
                f"üë£ @{message.from_user.username} —É—Å–ø–µ—à–Ω–æ —É–∫—Ä–∞–ª {stolen_amount}üí∞ —É @{username}!"
            ),
            parse_mode='HTML'
        )
        await state.clear()
    else:
        await bot.edit_message_text(
            chat_id=message.from_user.id,
            message_id=sent_message.message_id,
            text=(
                f"<b>[{'üü©' * 10}]</b>\n\n"
                f"‚ùå –ö—Ä–∞–∂–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å! –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                f"üîë –ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: <code>{password}</code>"
            ),
            parse_mode="HTML",
            reply_markup=markup_theft
        )
        await state.clear()

@router.callback_query(F.data == "knb_game")
async def knb_game_starter(call: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = call.from_user.id
    banned = get_banned_user(user_id)
    if banned:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    builder_knb = InlineKeyboardBuilder()
    builder_knb.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –º–∏–Ω–∏-–∏–≥—Ä", callback_data="mini_games")
    markup_knb = builder_knb.as_markup()
    input_photo_minigames = FSInputFile("photos/mini_game.jpg")
    await bot.send_photo(call.from_user.id, photo=input_photo_minigames, caption="<b>üïπ –í—ã –≤–æ—à–ª–∏ –≤ –º–∏–Ω–∏-–∏–≥—Ä—É –ö–ù–ë!</b>\n\n<blockquote><b>üéÆ –°—É—Ç—å –∏–≥—Ä—ã: </b>\n<i>–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ Username —á–µ–ª–æ–≤–µ–∫–∞, —Å—Ç–∞–≤–∫–∏ ‚Äî –≤–∞–º –ø–µ—Ä–≤—ã–º –¥–∞—é—Ç –Ω–∞ –≤—ã–±–æ—Ä 3 –¥–µ–π—Å—Ç–≤–∏—è: –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞. –ü–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞ ‚Äî –≤—ã–±–æ—Ä –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–æ–ø–µ—Ä–Ω–∏–∫—É –∏ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ –∏–≥—Ä–µ.</i></blockquote>\n\n<blockquote><b>üòä –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤–≤–µ–¥–∏—Ç–µ Username —á–µ–ª–æ–≤–µ–∫–∞</b></blockquote>\n\n<blockquote><b>‚ÄºÔ∏è –ü–µ—Ä–µ–¥–∞—á–∞ –∑–≤–µ–∑–¥ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ - –ß–°</b></blockquote>", reply_markup=markup_knb, parse_mode='HTML')
    await state.set_state(KNBGame.waiting_username)

@router.message(KNBGame.waiting_username)
async def knb_game_username(message: Message, bot: Bot, state: FSMContext):
    username = message.text
    balance = get_balance_user(message.from_user.id)
    if balance <= 0:
        await bot.send_message(message.from_user.id , "üö´ –£ –≤–∞—Å –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 0.")
    if username.startswith('@'):
        username = username[1:]
    if username == (message.from_user.username):
        await bot.send_message(message.from_user.id, "üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å–∞–º —Å —Å–æ–±–æ–π.")
        return
    user_id = get_id_from_username(username)
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.send_message(message.from_user.id, "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return
    if user_id is None:
        await bot.send_message(message.from_user.id, "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω.")
        return
    await state.update_data(username=username)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    builder_knb = InlineKeyboardBuilder()
    builder_knb.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –º–∏–Ω–∏-–∏–≥—Ä", callback_data="mini_games")
    markup_knb = builder_knb.as_markup()
    input_photo_minigames = FSInputFile("photos/mini_game.jpg")
    await bot.send_photo(message.from_user.id, photo=input_photo_minigames, caption=f"<b>üïπ –í—ã –≤–æ—à–ª–∏ –≤ –º–∏–Ω–∏-–∏–≥—Ä—É –ö–ù–ë!</b>\n\n<blockquote><b>üë§ –í—ã–±—Ä–∞–Ω –∏–≥—Ä–æ–∫: <code>{username}</code> | <code>{user_id}</code></b></blockquote>\n\n<blockquote><b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:</b></blockquote>", reply_markup=markup_knb, parse_mode='HTML')
    await state.set_state(KNBGame.waiting_stake)

@router.message(KNBGame.waiting_stake)
async def knb_game_stake(message: Message, bot: Bot, state: FSMContext):
    try:
        stake = float(message.text)
        balance_user1 = get_balance_user(message.from_user.id)
        username = await state.get_data()
        username = username['username']
        user_id = get_id_from_username(username)
        balance_user2 = get_balance_user(user_id)
        if balance_user1 < stake:
            await bot.send_message(message.from_user.id, "üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥.")
            return
        elif balance_user2 < stake:
            await bot.send_message(message.from_user.id, "üö´ –£ –∏–≥—Ä–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥.")
            return
        elif stake < 0:
            await bot.send_message(message.from_user.id, "üö´ –°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
    except ValueError:
        await bot.send_message(message.from_user.id, "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(stake=stake)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    id = create_knb(message.from_user.id, user_id, bet=stake)
    input_photo_minigames = FSInputFile("photos/mini_game.jpg")
    await bot.send_photo(message.from_user.id, photo=input_photo_minigames, caption=f"<b>üïπ –í—ã –≤–æ—à–ª–∏ –≤ –º–∏–Ω–∏-–∏–≥—Ä—É –ö–ù–ë!</b>\n\n<blockquote><b>üë§ –í—ã–±—Ä–∞–Ω –∏–≥—Ä–æ–∫: <code>{username}</code> | <code>{user_id}</code>\nüí∞ –°—Ç–∞–≤–∫–∞: <code>{stake}</code></b></blockquote>\n\n<i>–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–º–µ—Ç –∏–≥—Ä—É.</i>", parse_mode='HTML')
    player_builder = InlineKeyboardBuilder()
    player_builder.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∏–≥—Ä—É", callback_data=f"accept_knb:{id}:{stake}:{message.from_user.id}")
    player_builder.button(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline_knb:{id}:{message.from_user.id}")
    player_markup = player_builder.adjust(1, 1).as_markup()
    await bot.send_message(user_id, f"üïπ –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –º–∏–Ω–∏-–∏–≥—Ä—É –ö–ù–ë!\n\n<blockquote><b>üÜî –ò–≥—Ä—ã: {id}\nüë§ –ü—Ä–∏–≥–ª–∞—Å–∏–ª –∏–≥—Ä–æ–∫: <code>{message.from_user.first_name}</code> | <code>{message.from_user.id}</code>\nüí∞ –°—Ç–∞–≤–∫–∞: <code>{stake}</code></b></blockquote>", parse_mode='HTML', reply_markup=player_markup)

@router.callback_query(F.data.startswith("accept_knb:"))
async def accept_knb_callback(call: CallbackQuery, bot: Bot):
    id_game = call.data.split(':')[1]
    stake = call.data.split(':')[2]
    use_id = call.data.split(':')[3]
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.answer_callback_query(call.id, "‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∏–≥—Ä—É.")
    await bot.send_message(call.from_user.id, "‚åõÔ∏è –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–µ—Ç —Å–≤–æ–π —Ö–æ–¥.")

    deincrement_stars(use_id, stake)
    deincrement_stars(call.from_user.id, stake)
    markup_choice = InlineKeyboardBuilder()
    markup_choice.button(text="[‚úä] –ö–∞–º–µ–Ω—å", callback_data=f"stone_knb:{id_game}:first_player")
    markup_choice.button(text="[‚úåÔ∏è] –ù–æ–∂–Ω–∏—Ü—ã", callback_data=f"scissors_knb:{id_game}:first_player")
    markup_choice.button(text="[‚úã] –ë—É–º–∞–≥–∞", callback_data=f"paper_knb:{id_game}:first_player")
    markup = markup_choice.adjust(3).as_markup()
    await bot.send_message(use_id, f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.first_name} –ø—Ä–∏–Ω—è–ª –∏–≥—Ä—É.</b>\n\n<blockquote><b>üí∞ –°—Ç–∞–≤–∫–∞: {stake}</b></blockquote>", parse_mode='HTML', reply_markup=markup)

@router.callback_query(F.data.split(":")[2] == "first_player")
async def handle_first_player_choice(call: CallbackQuery, bot: Bot):
    data_parts = call.data.split(":")
    choice_type = data_parts[0].split("_")[0]
    game_id = data_parts[1]
    
    change_choice(game_id, "first_player", choice_type)
    
    game = get_knb_game(game_id)
    second_player_id = game[2]
    stake = game[6]
    
    markup_choice = InlineKeyboardBuilder()
    markup_choice.button(text="‚úä –ö–∞–º–µ–Ω—å", callback_data=f"stone_knb:{game_id}:second_player")
    markup_choice.button(text="‚úåÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data=f"scissors_knb:{game_id}:second_player")
    markup_choice.button(text="‚úã –ë—É–º–∞–≥–∞", callback_data=f"paper_knb:{game_id}:second_player")
    markup = markup_choice.adjust(3).as_markup()
    await bot.send_message(
        second_player_id,
        f"<b>üé≤ –í–∞—à —Ö–æ–¥ –≤ –∏–≥—Ä–µ –ø—Ä–æ—Ç–∏–≤ {call.from_user.first_name}</b>\n\n"
        f"<blockquote><b>üí∞ –°—Ç–∞–≤–∫–∞:</b> <code>{stake}</code></blockquote>",
        reply_markup=markup,
        parse_mode='HTML'
    )
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.answer_callback_query(call.id, "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–≤–æ–π —Ö–æ–¥.")

@router.message(F.text == '/–∫–ª–∏–∫–∏')
async def clicks_command(message: Message, bot: Bot):
    if message.chat.id == id_chat:
        await message.reply(f"<b>üéâ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤: {get_count_clicks(message.from_user.id)}</b>", parse_mode='HTML')

@router.message(F.text == "/—Ä–µ—Ñ–µ—Ä–∞–ª—ã")
async def ref_command(message: Message, bot: Bot):
    if message.chat.id == id_chat:
        await message.reply(f"<b>üéâ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {get_user_referrals_count(message.from_user.id)}</b>", parse_mode='HTML')

@router.message(F.text == "/–±–∞–ª–∞–Ω—Å")
async def balance_command(message: Message, bot: Bot):
    if message.chat.id == id_chat:
        await message.reply(f"<b>üéâ –í–∞—à –±–∞–ª–∞–Ω—Å: {get_balance_user(message.from_user.id):.2f} ‚≠êÔ∏è</b>", parse_mode='HTML')
    
@router.message(F.text == "/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_command(message: Message, bot: Bot):
    if message.chat.id == id_chat:
        clicks = get_count_clicks(message.from_user.id)
        refs = get_user_referrals_count(message.from_user.id)
        withdrawed = get_withdrawn(message.from_user.id)
        refs_week = get_weekly_referrals(message.from_user.id)
        if user_in_booster(message.from_user.id):
            time_until = get_time_until_boost(message.from_user.id)
            time_until = datetime.fromtimestamp(time_until).strftime("%d")
            await message.reply(f"<b>üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {message.from_user.id} | {message.from_user.first_name}</b>\n\n<blockquote><i>üí´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤: {clicks}</i>\n<i>üë• –û–±—â–µ–µ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–ª–æ–≤: {refs}</i>\n<i>üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {refs_week}</i>\n<i>‚≠êÔ∏è –í—ã–≤–µ–¥–µ–Ω–æ –∑–≤—ë–∑–¥: {withdrawed:.2f}</i>\n<i>‚åõÔ∏è –î–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±—É—Å—Ç–∞: {time_until}</i></blockquote>", parse_mode='HTML')
        else:
            await message.reply(f"<b>üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {message.from_user.id} | {message.from_user.first_name}</b>\n\n<blockquote><i>üí´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤: {clicks}</i>\n<i>üë• –û–±—â–µ–µ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–ª–æ–≤: {refs}</i>\n<i>üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {refs_week}</i>\n<i>‚≠êÔ∏è –í—ã–≤–µ–¥–µ–Ω–æ –∑–≤—ë–∑–¥: {withdrawed:.2f}</i></blockquote>", parse_mode='HTML')


@router.callback_query(F.data.split(":")[2] == "second_player")
async def handle_second_player_choice(call: CallbackQuery, bot: Bot):
    data_parts = call.data.split(":")
    choice_type = data_parts[0].split("_")[0]
    game_id = data_parts[1]
    
    change_choice(game_id, "second_player", choice_type)
    
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.answer_callback_query(call.id, "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–≤–æ–π —Ö–æ–¥.")
    winner_text = ""

    game = get_knb_game(game_id)
    first_player_id = game[1]
    second_player_id = game[2]
    choice_1 = game[3]
    # print(choice_1)
    choice_2 = game[4]
    # print(choice_2)
    stake = game[6]
    result = set_result(game_id, choice_1, choice_2)
    # print(result)
    if result == "–ù–∏—á—å—è":
        winner_text = "–ù–∏—á—å—è! üü∞"
        increment_stars(first_player_id, stake)
        increment_stars(second_player_id, stake)
    else:
        winner_id = first_player_id if result == "–ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª!" else second_player_id
        # print(winner_id)
        increment_stars(winner_id, stake * 2)
        winner = await bot.get_chat(winner_id)
        winner_text = f"–ü–æ–±–µ–¥—É –æ–¥–µ—Ä–∂–∞–ª @{winner.username}"
        # print(winner_text)

    if choice_1 == "stone":
        choice_1 = "[‚úä] –ö–∞–º–µ–Ω—å"
    elif choice_1 == "scissors":
        choice_1 = "[‚úåÔ∏è] –ù–æ–∂–Ω–∏—Ü—ã"
    elif choice_1 == "paper":
        choice_1 = "[‚úã] –ë—É–º–∞–≥–∞"
    
    if choice_2 == "stone":
        choice_2 = "[‚úä] –ö–∞–º–µ–Ω—å"
    elif choice_2 == "scissors":
        choice_2 = "[‚úåÔ∏è] –ù–æ–∂–Ω–∏—Ü—ã"
    elif choice_2 == "paper":
        choice_2 = "[‚úã] –ë—É–º–∞–≥–∞"
    
    
    for player_id in [first_player_id, second_player_id]:
        builder_knb = InlineKeyboardBuilder()
        builder_knb.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –º–∏–Ω–∏-–∏–≥—Ä", callback_data="mini_games")
        markup_knb = builder_knb.as_markup()
        first_player = await bot.get_chat(first_player_id)
        second_player = await bot.get_chat(second_player_id)
        await bot.send_message(
            player_id,
            f"<b>üéâ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
            f"<blockquote>‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"<b><a href='https://t.me/{first_player.username}'>üë§ –ò–≥—Ä–æ–∫ 1</a>: {choice_1}\n"
            f"<a href='https://t.me/{second_player.username}'>üë§ –ò–≥—Ä–æ–∫ 2</a>: {choice_2}</b>\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"<b>üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã: {winner_text}</b>\n"
            f"<b>üí∞ –°—Ç–∞–≤–∫–∞: <code>{stake}</code></b></blockquote>",
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_markup=markup_knb
        )
    await bot.send_message(
            id_channel_game,
            f"<b>üéâ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
            f"<blockquote>‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"<b><a href='https://t.me/{first_player.username}'>üë§ –ò–≥—Ä–æ–∫ 1</a>: {choice_1}\n"
            f"<a href='https://t.me/{second_player.username}'>üë§ –ò–≥—Ä–æ–∫ 2</a>: {choice_2}</b>\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"<b>üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã: {winner_text}</b>\n"
            f"<b>üí∞ –°—Ç–∞–≤–∫–∞: <code>{stake}</code></b></blockquote>",
            parse_mode='HTML',
            disable_web_page_preview=True
        )


@router.callback_query(F.data.startswith("decline_knb:"))
async def decline_knb_callback(call: CallbackQuery, bot: Bot):
    id_game = call.data.split(':')[1]
    use_id = call.data.split(':')[2]
    delete_knb(id_game)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.answer_callback_query(call.id, "üö´ –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∏–≥—Ä—ã.")
    await bot.send_message(use_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∏–≥—Ä—ã.")

@router.callback_query(F.data == "lottery_game")
async def lottery_game_callback(call: CallbackQuery, bot: Bot):
    lot_id = get_id_lottery_enabled()
    if lot_id != "–ù–µ—Ç.":
        count_tickets_user = get_count_tickets_by_user(lot_id, call.from_user.id)
        if count_tickets_user > 0:
            await bot.answer_callback_query(call.id, "üéâ –í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ –±–∏–ª–µ—Ç –≤ –¥–∞–Ω–Ω—É—é –ª–æ—Ç–µ—Ä–µ—é.")
            return
        all_cash = get_cash_in_lottery()
        # money_user = get_balance_user(call.from_user.id)
        ticket_cash = get_ticket_cash_in_lottery()
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        lottery_game = InlineKeyboardBuilder()
        lottery_game.button(text="üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç", callback_data=f"buy_ticket:{lot_id}:{ticket_cash}")
        lottery_game.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –º–∏–Ω–∏-–∏–≥—Ä", callback_data="mini_games")
        markup_lottery_game = lottery_game.adjust(1, 1).as_markup()
        await bot.send_message(call.from_user.id, f"<b>üéâ –í—ã –≤–æ—à–ª–∏ –≤ –ª–æ—Ç–µ—Ä–µ—é ‚Ññ{lot_id}\n\nüí∞ –¢–µ–∫—É—â–∏–π –¥–∂–µ–∫–ø–æ—Ç: {all_cash}\nüíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞: {ticket_cash}</b>", parse_mode='HTML', reply_markup=markup_lottery_game)
    else:
        await bot.answer_callback_query(call.id, "üòá –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ª–æ—Ç–µ—Ä–µ—è –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è.")

@router.callback_query(F.data.startswith("buy_ticket:"))
async def buy_ticket_callback(call: CallbackQuery, bot: Bot):
    lot_id = call.data.split(':')[1]
    count_tickets_user = get_count_tickets_by_user(lot_id, call.from_user.id)
    if count_tickets_user > 0:
        await bot.answer_callback_query(call.id, "üéâ –í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ –±–∏–ª–µ—Ç –≤ –¥–∞–Ω–Ω—É—é –ª–æ—Ç–µ—Ä–µ—é.")
        return
    ticket_cash = call.data.split(':')[2]
    money_user = get_balance_user(call.from_user.id)
    if float(ticket_cash) > money_user:
        await bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥.")
        return
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    add_lottery_entry(lot_id, call.from_user.id, call.from_user.username, ticket_cash)
    deincrement_stars(call.from_user.id, float(ticket_cash))
    lottery_back = InlineKeyboardBuilder()
    lottery_back.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –º–∏–Ω–∏-–∏–≥—Ä", callback_data="mini_games")
    markup_lottery_back = lottery_back.adjust(1).as_markup()
    await bot.send_message(call.from_user.id, f"<b>üé´ –í—ã –∫—É–ø–∏–ª–∏ –±–∏–ª–µ—Ç –≤ –ª–æ—Ç–µ—Ä–µ—é ‚Ññ{lot_id}</b>", parse_mode='HTML', reply_markup=markup_lottery_back)

@router.callback_query(F.data == "play_game")
async def play_game_callback(call: CallbackQuery, bot: Bot):
    builder_game = InlineKeyboardBuilder()
    builder_game.button(text="–°—Ç–∞–≤–∫–∞ 0.5‚≠êÔ∏è", callback_data="play_game_with_bet:0.5")
    builder_game.button(text="–°—Ç–∞–≤–∫–∞ 1‚≠êÔ∏è", callback_data="play_game_with_bet:1")
    builder_game.button(text="–°—Ç–∞–≤–∫–∞ 2‚≠êÔ∏è", callback_data="play_game_with_bet:2")
    builder_game.button(text="–°—Ç–∞–≤–∫–∞ 3‚≠êÔ∏è", callback_data="play_game_with_bet:3")
    builder_game.button(text="–°—Ç–∞–≤–∫–∞ 4‚≠êÔ∏è", callback_data="play_game_with_bet:4")
    builder_game.button(text="–°—Ç–∞–≤–∫–∞ 5‚≠êÔ∏è", callback_data="play_game_with_bet:5")
    builder_game.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –º–∏–Ω–∏-–∏–≥—Ä", callback_data="mini_games")
    markup_game = builder_game.adjust(3, 3, 1).as_markup()

    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    try:
        balance = get_balance_user(call.from_user.id)
        with open('photos/mini_game.jpg', 'rb') as photo:
            input_photo_playgame = FSInputFile("photos/mini_game.jpg")
            await bot.send_photo(call.from_user.id, photo=input_photo_playgame, caption=f"<b>üí∞ –£ —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É:</b> {balance} ‚≠êÔ∏è\n\nüîî –¢—ã –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É '–ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É'. –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É –∏ –ø–æ–ø—ã—Ç–∞–π—Å—è –ø–æ–±–µ–¥–∏—Ç—å! üçÄ\n\nüìä –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π: {channel_link}", parse_mode='HTML', reply_markup=markup_game)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await bot.send_message(call.from_user.id, f"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.</b>\n\nüîî –¢—ã –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É '–ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É'. –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É –∏ –ø–æ–ø—ã—Ç–∞–π—Å—è –ø–æ–±–µ–¥–∏—Ç—å! üçÄ\n\nüìä –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π: {channel_link}", parse_mode='HTML', reply_markup=markup_game)


@router.callback_query(F.data == "giftday")
async def giftday_callback(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    try:
        last_claim_time = get_last_daily_gift_time(user_id)
        current_time = time.time()
        if last_claim_time and (current_time - last_claim_time) < DAILY_COOLDOWN:
            remaining_time = int(DAILY_COOLDOWN - (current_time - last_claim_time))
            hours = remaining_time // 3600
            minutes = (remaining_time % 3600) // 60
            seconds = remaining_time % 60
            await bot.answer_callback_query(call.id, f"‚åõÔ∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç(—ã), {seconds} —Å–µ–∫—É–Ω–¥(—ã) –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–¥–∞—Ä–∫–æ–º", show_alert=True)
        else:
            increment_stars(user_id, GIFT_AMOUNT[0])
            update_last_daily_gift_time(user_id)
            await bot.answer_callback_query(call.id, f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ {GIFT_AMOUNT[0]}‚≠êÔ∏è", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞: {e}")
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞.", show_alert=True)


@router.callback_query(F.data == "leaders")
async def leaders_callback(call: CallbackQuery, bot: Bot):

    user_id = call.from_user.id
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    first_name = call.from_user.first_name
    language_code = call.from_user.language_code
    is_premium = getattr(call.from_user, 'is_premium', None)

    if user_id not in admins_id:
        response = await request_op(
                user_id=user_id,
                chat_id=chat_id,
                first_name=first_name,
                language_code=language_code,
                bot=bot,
                ref_id=None,
                is_premium=is_premium
            )

        if response != 'ok':
            return
    
    await show_leaderboard(call.message, 'day', bot)


@router.callback_query(F.data == "week")
async def week_callback(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    await show_leaderboard(call.message, 'week', bot)


@router.callback_query(F.data == "month")
async def month_callback(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    await show_leaderboard(call.message, 'month', bot)

def extract_chat_info(link: str) -> str:
    parts = link.strip().split("/")
    identifier = parts[-1]
    if identifier.startswith("+"):
        return identifier
    
    return f"@{identifier}"


@router.callback_query(F.data == "tasks")
async def tasks_callback(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    first_name = call.from_user.first_name
    language_code = call.from_user.language_code
    is_premium = getattr(call.from_user, 'is_premium', None)

    if user_id not in admins_id:
        response = await request_op(
                user_id=user_id,
                chat_id=chat_id,
                first_name=first_name,
                language_code=language_code,
                bot=bot,
                ref_id=None,
                is_premium=is_premium
            )

        if response != 'ok':
            return
    
    builder_back = InlineKeyboardBuilder()
    builder_back.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    markup_back = builder_back.as_markup()

    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    try:
        tasks = await request_task(call.from_user.id, call.from_user.id, call.from_user.first_name, call.from_user.language_code, bot)
        if tasks == 'ok':
            await bot.send_message(call.from_user.id, "<b>üéØ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!\n\n–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ!</b>", parse_mode='HTML', reply_markup=markup_back)
            return

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏–π: {e}")
        await bot.send_message(call.from_user.id, "<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π.</b>", parse_mode='HTML', reply_markup=markup_back)


@router.callback_query(F.data == "withdraw_stars_menu")
async def withdraw_stars_menu_callback(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    user_id = call.from_user.id
    chat_id = call.message.chat.id
    first_name = call.from_user.first_name
    language_code = call.from_user.language_code
    is_premium = getattr(call.from_user, 'is_premium', None)

    if user_id not in admins_id:
        response = await request_op(
                user_id=user_id,
                chat_id=chat_id,
                first_name=first_name,
                language_code=language_code,
                bot=bot,
                ref_id=None,
                is_premium=is_premium
            )

        if response != 'ok':
            return
    builder_stars = InlineKeyboardBuilder()
    builder_stars.button(text="15 ‚≠êÔ∏è(üß∏)", callback_data="withdraw:15:üß∏")
    builder_stars.button(text="15 ‚≠êÔ∏è(üíù)", callback_data="withdraw:15:üíù")
    builder_stars.button(text="25 ‚≠êÔ∏è(üåπ)", callback_data="withdraw:25:üåπ")
    builder_stars.button(text="25 ‚≠êÔ∏è(üéÅ)", callback_data="withdraw:25:üéÅ")
    builder_stars.button(text="50 ‚≠êÔ∏è(üçæ)", callback_data="withdraw:50:üçæ")
    builder_stars.button(text="50 ‚≠êÔ∏è(üöÄ)", callback_data="withdraw:50:üöÄ")
    builder_stars.button(text="50 ‚≠êÔ∏è(üíê)", callback_data="withdraw:50:üíê")
    builder_stars.button(text="50 ‚≠êÔ∏è(üéÇ)", callback_data="withdraw:50:üéÇ")
    builder_stars.button(text="100 ‚≠êÔ∏è(üèÜ)", callback_data="withdraw:100:üèÜ")
    builder_stars.button(text="100 ‚≠êÔ∏è(üíç)", callback_data="withdraw:100:üíç")
    builder_stars.button(text="100 ‚≠êÔ∏è(üíé)", callback_data="withdraw:100:üíé")
    builder_stars.button(text="Telegram Premium 1–º–µ—Å. (400 ‚≠êÔ∏è)", callback_data="withdraw:premium1")
    builder_stars.button(text="Telegram Premium 3–º–µ—Å. (1100 ‚≠êÔ∏è)", callback_data="withdraw:premium2")
    builder_stars.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    markup_stars = builder_stars.adjust(2, 2, 2, 2, 2, 1, 1, 1).as_markup()

    try:
        balance = str(get_balance_user(call.from_user.id))
        with open('photos/withdraw_stars.jpg', 'rb') as photo:
            input_photo_withdraw = FSInputFile("photos/withdraw_stars.jpg")
            await bot.send_photo(call.from_user.id, photo=input_photo_withdraw, caption=f'<b>üî∏ –£ —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É: {balance[:balance.find(".") + 2]}‚≠êÔ∏è</b>\n\n<b>‚ùóÔ∏è –í–∞–∂–Ω–æ!</b> –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã (–ø–æ–¥–∞—Ä–∫–∞) –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞:\n<a href="{channel_osn}">–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª</a> | <a href="{chater}">–ß–∞—Ç</a> | <a href="{channel_viplat}">–ö–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç</a>\n\n<blockquote>‚ÄºÔ∏è –ï—Å–ª–∏ –Ω–µ –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞ - –≤—ã–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞, –∑–≤—ë–∑–¥—ã –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è!</blockquote>\n\n<b>–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –æ–±–º–µ–Ω—è—Ç—å, –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:</b>', parse_mode='HTML', reply_markup=markup_stars)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –≤—ã–≤–æ–¥–∞: {e}")
        await bot.send_message(call.from_user.id, "<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –≤—ã–≤–æ–¥–∞.</b>", parse_mode='HTML', reply_markup=markup_stars)


@router.callback_query(F.data == "my_balance")
async def my_balance_callback(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    user_id = call.from_user.id
    chat_id = call.message.chat.id
    first_name = call.from_user.first_name
    language_code = call.from_user.language_code
    is_premium = getattr(call.from_user, 'is_premium', None)

    if user_id not in admins_id:
        response = await request_op(
                user_id=user_id,
                chat_id=chat_id,
                first_name=first_name,
                language_code=language_code,
                bot=bot,
                ref_id=None,
                is_premium=is_premium
            )

        if response != 'ok':
            return
    builder_profile = InlineKeyboardBuilder()
    builder_profile.button(text='üéÅ –ï–∂–µ–¥–Ω–µ–≤–∫–∞', callback_data='giftday')
    builder_profile.button(text="üé´ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promocode")
    builder_profile.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    markup_profile = builder_profile.adjust(2, 1).as_markup()

    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    nickname = html.escape(call.from_user.first_name)
    user_id = html.escape(str(call.from_user.id))

    try:
        balance = float(get_balance_user(call.from_user.id))
        count_refs = get_user_referrals_count(call.from_user.id)
        
        with open('photos/profile.jpg', 'rb') as photo:
            input_photo_profile = FSInputFile("photos/profile.jpg")
            if user_in_booster(call.from_user.id):
                time_until = get_time_until_boost(call.from_user.id)
                time_until_str = html.escape(datetime.fromtimestamp(time_until).strftime("%d"))
                caption = (
                    f"<b>‚ú® –ü—Ä–æ—Ñ–∏–ª—å\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüë§ –ò–º—è: {nickname}\nüÜî ID: <code>{user_id}</code>\n"
                    f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüí∞ –ë–∞–ª–∞–Ω—Å:</b> {html.escape(f'{balance:.2f}')}‚≠êÔ∏è\n"
                    f"<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {html.escape(str(count_refs))}\n"
                    f"<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n<b>‚è≥ –î–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±—É—Å—Ç–∞</b>: {time_until_str}\n"
                    f"<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n‚¨áÔ∏è <i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π.</i>"
                )
                await bot.send_photo(
                    call.from_user.id,
                    photo=input_photo_profile,
                    caption=caption,
                    parse_mode='HTML',
                    reply_markup=markup_profile
                )
            else:
                caption = (
                    f"<b>‚ú® –ü—Ä–æ—Ñ–∏–ª—å\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüë§ –ò–º—è: {nickname}\nüÜî ID: <code>{user_id}</code>\n"
                    f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüí∞ –ë–∞–ª–∞–Ω—Å:</b> {html.escape(f'{balance:.2f}')}‚≠êÔ∏è\n"
                    f"<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {html.escape(str(count_refs))}\n"
                    f"<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n‚¨áÔ∏è <i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π.</i>"
                )
                await bot.send_photo(
                    call.from_user.id,
                    photo=input_photo_profile,
                    caption=caption,
                    parse_mode='HTML',
                    reply_markup=markup_profile
                )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        error_message = (
            f"<b>–ü—Ä–æ—Ñ–∏–ª—å: {nickname} | ID: <code>{user_id}</code></b>\n\n"
            f"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.\n"
            f"–ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>"
        )
        await bot.send_message(
            call.from_user.id,
            error_message,
            parse_mode='HTML',
            reply_markup=markup_profile
        )

@router.callback_query(F.data == "promocode")
async def promocode_callback_query(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    with open('photos/promocode.jpg', 'rb') as photo:
        input_photo_promo = FSInputFile("photos/promocode.jpg")
        await bot.send_photo(call.from_user.id, photo=input_photo_promo, caption=f"‚ú® –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:\n*<i>–ù–∞–π—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã –º–æ–∂–Ω–æ –≤ <a href='{channel_osn}'>–∫–∞–Ω–∞–ª–µ</a> –∏ <a href='{chater}'>—á–∞—Ç–µ</a></i>", parse_mode='HTML')
    await state.set_state(AdminState.PROMOCODE_INPUT)


@router.callback_query(F.data == "faq")
async def faq_callback(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    user_id = call.from_user.id
    chat_id = call.message.chat.id
    first_name = call.from_user.first_name
    language_code = call.from_user.language_code
    is_premium = getattr(call.from_user, 'is_premium', None)

    if user_id not in admins_id:
        response = await request_op(
                user_id=user_id,
                chat_id=chat_id,
                first_name=first_name,
                language_code=language_code,
                bot=bot,
                ref_id=None,
                is_premium=is_premium
            )

        if response != 'ok':
            return
    
    builder_back = InlineKeyboardBuilder()
    builder_back.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    markup_back = builder_back.as_markup()

    await bot.send_message(call.from_user.id, f"""<b>‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ):
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ</b>
                         
<blockquote><b>ü´° –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã

üü©–ó–∞–ø—Ä–æ—Å–∏–ª(–∞) –∑–≤—ë–∑–¥—ã, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—É—Ç? - –û—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ —Å—É–º–º—É –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –∑–≤—ë–∑–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ  3-—Ö –¥–Ω–µ–π

üü© –Ø –ø–æ–ª—É—á–∏–ª(–∞) –ø–æ–¥–∞—Ä–æ–∫ –∞ –Ω–µ –∑–≤—ë–∑–¥—ã! - –í—Å–µ –≤–µ—Ä–Ω–æ, –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ –∏–ª–∏ –∂–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∑–≤—ë–∑–¥—ã

üü© –õ—é–¥–∏ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –ø–æ —Å—Å—ã–ª–∫–µ, –Ω–æ —è –Ω–µ –ø–æ–ª—É—á–∞—é –∑–≤—ë–∑–¥! - –ó–Ω–∞—á–∏—Ç –¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–ª –ø–æ —á—å–µ–π –ª–∏–±–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –∂–µ –ø–µ—Ä–µ—à–ª –≤ –±–æ—Ç–∞ –Ω–µ –ø–æ —Ä–µ—Ñ.—Å—Å—ã–ª–∫–µ

üü© –ú–æ–≥—É –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –∑–≤—ë–∑–¥—ã —É –≤–∞—Å? - –ù–µ—Ç, –º—ã –Ω–µ –ø–æ–∫—É–ø–∞–µ–º –∏ –Ω–µ –ø—Ä–æ–¥–∞–µ–º –∑–≤—ë–∑–¥—ã —Ç–µ–ª–µ–≥—Ä–∞–º!</b></blockquote>

<b>‚ùóÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ</b>
                 
<blockquote>–ó–∞—è–≤–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –µ—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞.
üì© –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å <a href="{admin_link}">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π</a>, —É–∫–∞–∑–∞–≤:
‚Äî –°—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç —Å –≤—ã–ø–ª–∞—Ç–æ–π
‚Äî –í–∞—à ID –∏–∑ –±–æ—Ç–∞
‚ú® –£–¥–∞—á–∏ –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞ –∑–≤—ë–∑–¥! üåü</blockquote>
""", parse_mode='HTML', reply_markup=markup_back, disable_web_page_preview=True)


@router.callback_query(F.data == "earn_stars")
async def earn_stars_callback(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    banned = get_banned_user(user_id)
    if banned == 1:
        await bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", show_alert=True)
        return
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    user_id = call.from_user.id
    chat_id = call.message.chat.id
    first_name = call.from_user.first_name
    language_code = call.from_user.language_code
    is_premium = getattr(call.from_user, 'is_premium', None)

    if user_id not in admins_id:
        response = await request_op(
                user_id=user_id,
                chat_id=chat_id,
                first_name=first_name,
                language_code=language_code,
                bot=bot,
                ref_id=None,
                is_premium=is_premium
            )

        if response != 'ok':
            return

    ref_link = f"https://t.me/{ (await bot.me()).username }?start={call.from_user.id}"
    builder_earn = InlineKeyboardBuilder()
    builder_earn.button(text="üëâ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url={ref_link}")
    builder_earn.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    markup_earn = builder_earn.adjust(1).as_markup()
    c_refs = get_user_referrals_count(call.from_user.id)
    user_is_booster = user_in_booster(call.from_user.id)
    stars = 0
    level = 0
    if c_refs < 50:
        stars = nac_1[0]
        level = 1
    elif c_refs >= 50 and c_refs < 250:
        stars = nac_2[0]
        level = 2
    else:
        stars = nac_3[0]
        level = 3

    blockquote_text = f"""
    <blockquote>üîπ <b>–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {level}</b>

üîπ <b>–£—Ä–æ–≤–Ω–∏ –∏ –Ω–∞–≥—Ä–∞–¥—ã:</b>
- <b>1 —É—Ä–æ–≤–µ–Ω—å:</b> {nac_1[0] * 2 if user_is_booster else nac_1[0]} –∑–≤–µ–∑–¥ ‚≠êÔ∏è (–¥–æ 50 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π)
- <b>2 —É—Ä–æ–≤–µ–Ω—å:</b> {nac_2[0] * 2 if user_is_booster else nac_2[0]} –∑–≤–µ–∑–¥–∞ ‚≠êÔ∏è (–æ—Ç 50 –¥–æ 250 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π)
- <b>3 —É—Ä–æ–≤–µ–Ω—å:</b> {nac_3[0] * 2 if user_is_booster else nac_3[0]} –∑–≤–µ–∑–¥—ã ‚≠êÔ∏è (250+ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π)
    </blockquote>
    """

    with open("photos/get_url.jpg", "rb") as photo:
        input_photo_earn = FSInputFile("photos/get_url.jpg")
        await bot.send_photo(call.from_user.id, photo=input_photo_earn, caption=f'<b>üéâ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –∑–≤—ë–∑–¥—ã! ‚≠êÔ∏è\n\nüöÄ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É?\n</b><i>‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –µ—ë –¥—Ä—É–∑—å—è–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üë•\n‚Ä¢ –ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π –≤ —Å–≤–æ—ë–º Telegram-–∫–∞–Ω–∞–ª–µ üì¢\n‚Ä¢ –û—Å—Ç–∞–≤—å –µ—ë –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏–ª–∏ —á–∞—Ç–∞—Ö üó®Ô∏è\n‚Ä¢ –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π —Å—Å—ã–ª–∫—É –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö: TikTok, Instagram, WhatsApp –∏ –¥—Ä—É–≥–∏—Ö üåç</i>\n\n<b>üíé –ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å?</b>\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å +<b>{stars * 2 if user_is_booster else stars}‚≠êÔ∏è</b>!\n{blockquote_text}\n\n<b>üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{ref_link}</code>\n\n–î–µ–ª–∏—Å—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —É–∂–µ —Å–µ–π—á–∞—Å! üöÄ</b>', parse_mode='HTML', reply_markup=markup_earn)

@router.callback_query(F.data == "back_main")
async def back_main_callback(call: CallbackQuery, bot: Bot):
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    builder_start = InlineKeyboardBuilder()
    buttons = [
        ('‚ú® –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã', 'click_star'),
        ('üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã', 'mini_games'),
        ('üîó –†–µ—Ñ–µ—Ä–∞–ª—ã', 'earn_stars'),
        ('üîÑ –í—ã–≤–µ—Å—Ç–∏', 'withdraw_stars_menu'),
        ('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'my_balance'),
        ('üìù –ó–∞–¥–∞–Ω–∏—è', 'tasks'),
        ('üìò –ì–∞–π–¥—ã | FAQ', 'faq'),
        ('üöÄ –ë—É—Å—Ç', 'donate'),
        ('üèÜ –¢–æ–ø', 'leaders')
    ]
    for text, callback_data in buttons:
        builder_start.button(text=text, callback_data=callback_data)
    if beta_url and beta_name:
        builder_start.button(text=beta_name, url=beta_url)
    builder_start.adjust(1, 1, 2, 2, 2, 2, 1)
    markup_start = builder_start.as_markup()

    try:
        all_stars = str(sum_all_stars())
        withdrawed = str(sum_all_withdrawn())
        with open('photos/start.jpg', 'rb') as photo:
            input_photo_back_main = FSInputFile("photos/start.jpg")
            await bot.send_photo(call.from_user.id, photo=input_photo_back_main, caption=f"<b>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ú®</b>\n\n<b>üåü –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{all_stars[:all_stars.find('.') + 2] if '.' in all_stars else all_stars}</code>‚≠êÔ∏è</b>\n<b>‚ôªÔ∏è –í—Å–µ–≥–æ –æ–±–º–µ–Ω—è–ª–∏: <code>{withdrawed[:withdrawed.find('.') + 2] if '.' in withdrawed else withdrawed}</code>‚≠êÔ∏è</b>\n\n<b>–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã?</b>\n<blockquote>üî∏ <i>–ö–ª–∏–∫–∞–π, —Å–æ–±–∏—Ä–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –≤–≤–æ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã</i>\n‚Äî –≤—Å—ë —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª.\nüî∏ <i>–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π</i>\nüî∏ <i>–ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö</i>\n‚Äî –≤—Å—ë —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.</blockquote>", parse_mode='HTML', reply_markup=markup_start)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        await bot.send_message(call.from_user.id, "<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.</b>", parse_mode='HTML', reply_markup=markup_start)

@router.message(AdminState.USERS_CHECK)
async def users_check_handler(message: Message, state: FSMContext, bot: Bot):
    try:
        from datetime import datetime, timezone
        user_id = int(message.text)
        balance = get_balance_user(user_id)
        usname = get_username(user_id)
        count_ref = get_user_referrals_count(user_id)
        ref_id = get_id_refferer(user_id)
        withdrawd = get_withdrawn(user_id)
        reg_time = get_normal_time_registration(user_id)
        reg_time = datetime.fromtimestamp(reg_time, tz=timezone.utc).strftime('%d/%m/%Y %H:%M')
        click_count = get_count_clicks(user_id)
        banned = get_banned_user(user_id)
        count_task = get_count_tasks(user_id)
        
        markup = InlineKeyboardBuilder()
        markup.button(text="üë§ –†–µ—Ñ–µ—Ä–∞–ª–ª—ã", callback_data=f"refferals:{user_id}")
        markup.button(text="‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_user:{user_id}")
        markup.button(text="üü¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unblock_user:{user_id}")
        markup.button(text="‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_user:{user_id}")
        markup.button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="adminpanelka")
        markup.adjust(1, 1, 1, 1)
        markup_check = markup.as_markup()
        await bot.send_message(
            message.from_user.id,
            f"üßæ<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
            f"üë§ <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{user_id}</code>\n"
            f"üìõ <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{usname}\n"
            f"‚≠êÔ∏è<b>–ó–≤—ë–∑–¥—ã:</b> {balance}\n"
            f"<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n"
            f"üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {count_ref}\n"
            f"üîó <b>ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:</b> {ref_id}\n"
            f"<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n"
            f"üí∞ <b>–í—ã–≤–µ–¥–µ–Ω–æ:</b> {withdrawd}\n"
            f"üåç <b>–Ø–∑—ã–∫:</b> ru\n"
            f"<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n"
            f"‚è∞ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_time}\n"
            f"ü™û <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤:</b> {click_count}\n"
            f"üìÑ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:</b> {count_task}\n"
            f"<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {'üü© –ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if banned == 0 else '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n\n"
            f"üìä <i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∞.</i>",
            parse_mode='HTML',
            reply_markup=markup_check
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await bot.send_message(message.from_user.id, "<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</b>", parse_mode='HTML')
    except ValueError:
        await bot.send_message(message.from_user.id, "<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>", parse_mode='HTML')
    finally:
        await state.clear()

@router.callback_query(F.data.startswith('delete_user:'))
async def delete_user_callback(call: CallbackQuery, bot: Bot):
    try:
        user_id = int(call.data.split(":")[1])
        delete_user(user_id)
        await bot.answer_callback_query(call.id, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!", show_alert=True)
    except ValueError:
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", show_alert=True)

@router.callback_query(F.data.startswith('block_user:'))
async def block_user_callback(call: CallbackQuery, bot: Bot):
    try:
        user_id = int(call.data.split(":")[1])
        banned = get_banned_user(user_id)
        if banned == 1:
            await bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
            return
        set_banned_user(user_id, 1)
        await bot.answer_callback_query(call.id, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
    except ValueError:
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", show_alert=True)

@router.callback_query(F.data.startswith('unblock_user:'))
async def unblock_user_callback(call: CallbackQuery, bot: Bot):
    try:
        user_id = int(call.data.split(":")[1])
        banned = get_banned_user(user_id)
        if banned == 0:
            await bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
            return
        set_banned_user(user_id, 0)
        await bot.answer_callback_query(call.id, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
    except ValueError:
        await bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", show_alert=True)

@router.message(AdminState.ADD_STARS)
async def add_stars_handler(message: Message, state: FSMContext, bot: Bot):
    try:
        new = message.text.split(":")
        user_id = int(new[0])
        stars = float(new[1])
        balance_prev = get_balance_user(user_id)
        increment_stars(user_id, stars)
        balance_after = get_balance_user(user_id)
        await bot.send_message(message.from_user.id, f"<b>‚úÖ –ó–≤–µ–∑–¥—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>\n\n<b>üí∞ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {balance_prev:.2f}‚≠êÔ∏è\n<b>üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {balance_after:.2f}‚≠êÔ∏è", parse_mode='HTML')
        await bot.send_message(user_id, "<b>‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–∞–º –∑–≤–µ–∑–¥—ã.</b>", parse_mode='HTML')
    except ValueError:
        await message.reply("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID:–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ (—á–∏—Å–ª–∞).</b>", parse_mode='HTML')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ add_stars: {e}")
        await message.reply("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–≤–µ–∑–¥.</b>", parse_mode='HTML')
    finally:
        await state.clear()


async def send_message_with_retry(
    bot: Bot,
    chat_id: int,
    text: str,
    parse_mode=None,
    reply_markup=None,
    photo_file_id: Optional[str] = None,
    attempt: int = 0
):
    try:
        if photo_file_id:
            await bot.send_photo(
                chat_id,
                photo=photo_file_id,
                caption=text,
                parse_mode=parse_mode,
                reply_markup=reply_markup
            )
        else:
            await bot.send_message(
                chat_id,
                text,
                parse_mode=parse_mode,
                reply_markup=reply_markup
            )
        return True
    except (TelegramForbiddenError, TelegramNotFound) as e:
        logging.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {chat_id}. –ü—Ä–∏—á–∏–Ω–∞: {e}")
        return False
    except TelegramMigrateToChat as e:
        logging.info(f"–ß–∞—Ç –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω. –ù–æ–≤—ã–π ID: {e.migrate_to_chat_id}")
        return await send_message_with_retry(
            bot, e.migrate_to_chat_id, text, parse_mode, reply_markup, photo_file_id, attempt + 1
        )
    except TelegramRetryAfter as e:
        logging.warning(f"–û–∂–∏–¥–∞–µ–º {e.retry_after} —Å–µ–∫. –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–æ–≤.")
        await asyncio.sleep(e.retry_after)
        return await send_message_with_retry(
            bot, chat_id, text, parse_mode, reply_markup, photo_file_id, attempt + 1
        )
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False


async def update_progress(
    progress_message: types.Message,
    current: int,
    total_users: int,
    success: int,
    semaphore_value: int,
    speed_stats: dict
):
    percent = (current / total_users) * 100
    filled = int(percent / 10)
    progress_bar = 'üü©' * filled + '‚¨úÔ∏è' * (10 - filled)
    
    # –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ —Å–µ–∫—É–Ω–¥—É –∏ –≤ –º–∏–Ω—É—Ç—É
    current_speed = speed_stats["current_speed"]
    avg_speed = speed_stats["avg_speed"]
    
    try:
        await progress_message.edit_text(
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {percent:.1f}%\n"
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {current}/{total_users}\n"
            f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {semaphore_value}\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å: {current_speed:.1f} —Å–æ–æ–±—â/—Å–µ–∫ ({current_speed*60:.1f} —Å–æ–æ–±—â/–º–∏–Ω)\n"
            f"–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {avg_speed:.1f} —Å–æ–æ–±—â/—Å–µ–∫ ({avg_speed*60:.1f} —Å–æ–æ–±—â/–º–∏–Ω)"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")


async def broadcast(
    bot: Bot,
    start_msg: types.Message,
    users: List[Tuple[int]],
    text: str,
    photo_file_id: str = None,
    keyboard=None,
    max_concurrent: int = 25
):
    total_users = len(users)
    if not total_users:
        await start_msg.reply("<b>‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.</b>", parse_mode="HTML")
        return

    progress_message = await start_msg.reply(
        "<b>üì¢ –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        "–ü—Ä–æ–≥—Ä–µ—Å—Å: <code>üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú</code> <b>0%</b>\n"
        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>0</b>/<b>{}</b>\n"
        "‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>0</b>\n"
        "‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: <b>0</b>\n"
        "üìä –°–∫–æ—Ä–æ—Å—Ç—å: <b>0.0</b> —Å–æ–æ–±—â/—Å–µ–∫ (<b>0.0</b> —Å–æ–æ–±—â/–º–∏–Ω)\n"
        "üìâ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: <b>0.0</b> —Å–æ–æ–±—â/—Å–µ–∫ (<b>0.0</b> —Å–æ–æ–±—â/–º–∏–Ω)".format(total_users),
        parse_mode="HTML"
    )

    semaphore = asyncio.Semaphore(max_concurrent)
    progress_lock = asyncio.Lock()
    
    processed = 0
    success = 0
    tasks = []

    start_time = time.time()
    message_timestamps = deque(maxlen=100)
    speed_stats = {
        "current_speed": 0.0,
        "avg_speed": 0.0, 
        "last_update": start_time  
    }

    def calculate_speed():
        now = time.time()

        if len(message_timestamps) >= 2:
            time_span = message_timestamps[-1] - message_timestamps[0]
            if time_span > 0:
                current_speed = (len(message_timestamps) - 1) / time_span
            else:
                current_speed = 0
        else:
            current_speed = 0

        elapsed = now - start_time
        if elapsed > 0 and processed > 0:
            avg_speed = processed / elapsed
        else:
            avg_speed = 0
            
        return {
            "current_speed": current_speed,
            "avg_speed": avg_speed,
            "last_update": now
        }

    async def process_user(user_id):
        nonlocal processed, success
        
        async with semaphore:
            result = await send_message_with_retry(
                bot, user_id, text, "HTML", keyboard, photo_file_id
            )

            async with progress_lock:
                processed += 1
                if result:
                    success += 1
                
                message_timestamps.append(time.time())
                
                now = time.time()
                if (now - speed_stats["last_update"] > 2 or processed % 50 == 0):
                    speed_stats.update(calculate_speed())

                progress_percentage = processed / total_users * 100
                progress_blocks = int(progress_percentage // 10)
                progress_bar = "üü©" * progress_blocks + "‚¨ú" * (10 - progress_blocks)

                if processed % max(1, total_users//20) == 0 or processed == total_users:
                    active_tasks = len(tasks) - sum(task.done() for task in tasks)
                    await progress_message.edit_text(
                        "<b>üì¢ –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
                        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: <code>{progress_bar}</code> <b>{progress_percentage:.1f}%</b>\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{processed}</b>/<b>{total_users}</b>\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{success}</b>\n"
                        f"‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: <b>{active_tasks}</b>\n"
                        f"üìä –°–∫–æ—Ä–æ—Å—Ç—å: <b>{speed_stats['current_speed']:.1f}</b> —Å–æ–æ–±—â/—Å–µ–∫ "
                        f"(<b>{speed_stats['current_speed']*60:.1f}</b> —Å–æ–æ–±—â/–º–∏–Ω)\n"
                        f"üìâ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: <b>{speed_stats['avg_speed']:.1f}</b> —Å–æ–æ–±—â/—Å–µ–∫ "
                        f"(<b>{speed_stats['avg_speed']*60:.1f}</b> —Å–æ–æ–±—â/–º–∏–Ω)",
                        parse_mode="HTML"
                    )

    for user_id, in users:
        task = asyncio.create_task(process_user(user_id))
        tasks.append(task)

    await asyncio.gather(*tasks)

    elapsed_time = time.time() - start_time
    final_speed = processed / elapsed_time if elapsed_time > 0 else 0
    
    await progress_message.edit_text(
        "<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üì® –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{success}</b>/<b>{total_users}</b> "
        f"(<b>{success/total_users*100:.1f}%</b>)\n"
        f"‚è≥ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{elapsed_time:.1f}</b> —Å–µ–∫\n"
        f"üöÄ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: <b>{final_speed:.1f}</b> —Å–æ–æ–±—â/—Å–µ–∫ "
        f"(<b>{final_speed*60:.1f}</b> —Å–æ–æ–±—â/–º–∏–Ω)",
        parse_mode="HTML"
    )

    logging.info(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success}/{total_users} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {elapsed_time:.1f} —Å–µ–∫. "
        f"–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {final_speed:.1f} —Å–æ–æ–±—â/—Å–µ–∫"
    )



@router.message(AdminState.MAILING)
async def mailing_handler(message: types.Message, state: FSMContext):
    if message.photo:
        text = message.caption or ""
        entities = message.caption_entities or []
        photo_file_id = message.photo[-1].file_id
    else:
        text = message.text or ""
        entities = message.entities or []
        photo_file_id = None
    users = get_users_ids()

    buttons = re.findall(r"\{([^{}]+)\}:([^{}]+)", text)
    keyboard = None
    if buttons:
        kb = InlineKeyboardBuilder()
        for btn_text, btn_url in buttons:
            kb.button(text=btn_text.strip(), url=btn_url.strip())
        kb.adjust(1)
        keyboard = kb.as_markup()
        text = re.sub(r"\{[^{}]+\}:([^{}]+)", "", text).strip()

    formatted_text = apply_html_formatting(text, entities)

    logging.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    await broadcast(
        message.bot, message, users, formatted_text, photo_file_id, keyboard
    )
    await state.clear()


def apply_html_formatting(text, entities):
    if not text:
        return ""

    if not entities:
        return html.escape(text)

    escaped_text = html.escape(text)

    tag_map = {
        "bold": ("<b>", "</b>"),
        "italic": ("<i>", "</i>"),
        "underline": ("<u>", "</u>"),
        "strikethrough": ("<s>", "</s>"),
        "spoiler": ("<span class='tg-spoiler'>", "</span>"),
        "code": ("<code>", "</code>"),
        "pre": ("<pre>", "</pre>"),
        "blockquote": ("<blockquote>", "</blockquote>"),
    }

    operations = []
    
    for entity in entities:
        if entity.type in tag_map:
            start_tag, end_tag = tag_map[entity.type]
            operations.append((entity.offset, start_tag, "open", entity.type))
            operations.append((entity.offset + entity.length, end_tag, "close", entity.type))
    
    operations.sort(key=lambda x: (x[0], x[2] == "open"))

    result = []
    open_tags = []
    last_pos = 0  

    for pos, tag, tag_type, entity_type in operations:
        result.append(escaped_text[last_pos:pos])
        last_pos = pos  

        if tag_type == "close":
            while open_tags:
                last_tag = open_tags.pop()
                result.append(last_tag[1])
                if last_tag[0] == entity_type:
                    break
        else:
            result.append(tag)
            open_tags.append((entity_type, tag_map[entity_type][1]))

    result.append(escaped_text[last_pos:])

    while open_tags:
        result.append(open_tags.pop()[1])

    return "".join(result)


def safe_apply_html_formatting(text, entities):
    if not text:
        return ""

    if not entities:
        return html.escape(text)

    escaped_text = html.escape(text)
    positions = {}

    tag_map = {
        "bold": "b",
        "italic": "i",
        "underline": "u",
        "strikethrough": "s",
        "spoiler": "tg-spoiler",
        "code": "code",
        "pre": "pre",
        "blockquote": "blockquote",
    }

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–≥–∞–º–∏
    for entity in entities:
        if entity.type in tag_map:
            tag = tag_map[entity.type]
            start, end = entity.offset, entity.offset + entity.length

            positions.setdefault(start, []).append((tag, True))
            positions.setdefault(end, []).append((tag, False))

    result = []
    open_tags = []

    for i in range(len(escaped_text) + 1):
        if i in positions:
            closing_tags = [t for t, open_ in positions[i] if not open_]
            
            while closing_tags:
                if open_tags:
                    last_opened = open_tags.pop()
                    result.append(f"</{last_opened}>")
                    closing_tags.remove(last_opened)

            opening_tags = [t for t, open_ in positions[i] if open_]
            for tag in opening_tags:
                result.append(f"<{tag}>")
                open_tags.append(tag)

        if i < len(escaped_text):
            result.append(escaped_text[i])

    while open_tags:
        result.append(f"</{open_tags.pop()}>")

    return "".join(result)

@router.message(AdminState.ADD_CHANNEL)
async def add_channel_handler(message: Message, state: FSMContext, bot: Bot):
    try:
        channel_id = message.text
        required_subscription.append(int(channel_id))
        await message.reply(f"<b>‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>", parse_mode='HTML')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        await message.reply("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.</b>", parse_mode='HTML')
    finally:
        await state.clear()


@router.message(AdminState.REMOVE_CHANNEL)
async def delete_channel_handler(message: Message, state: FSMContext, bot: Bot):
    try:
        channel_id = message.text
        required_subscription.remove(int(channel_id))
        await message.reply(f"<b>‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>", parse_mode='HTML')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        await message.reply("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.</b>", parse_mode='HTML')
    finally:
        await state.clear()


@router.message(AdminState.PROMOCODE_INPUT)
async def promocode_handler(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    markup_back_inline = InlineKeyboardBuilder()
    markup_back_inline.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    markup_back = markup_back_inline.as_markup()

    promocode_text = message.text
    try:
        success, result = use_promocode(promocode_text, message.from_user.id)
        if success:
            await message.reply(f"<b>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {result} ‚≠êÔ∏è</b>", parse_mode='HTML', reply_markup=markup_back)
            await send_main_menu(user_id, bot)
        else:
            await message.reply(f"<b>‚ùå –û—à–∏–±–∫–∞: {result}</b>", parse_mode='HTML')
            await send_main_menu(user_id, bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await message.reply("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.</b>", parse_mode='HTML')
        await send_main_menu(user_id, bot)
    finally:
        await state.clear()


@router.message(AdminState.ADD_PROMO_CODE)
async def add_promo_code_handler(message: Message, state: FSMContext, bot: Bot):
    try:
        promocode, stars_str, max_uses_str = message.text.split(":")
        stars = int(stars_str)
        max_uses = int(max_uses_str)
        add_promocode(promocode, stars, max_uses)
        await message.reply(f"<b>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>", parse_mode='HTML')
    except ValueError:
        await message.reply("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:–Ω–∞–≥—Ä–∞–¥–∞:–º–∞–∫—Å. –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (—á–∏—Å–ª–∞).</b>", parse_mode='HTML')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await message.reply("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.</b>", parse_mode='HTML')
    finally:
        await state.clear()


@router.message(AdminState.REMOVE_PROMO_CODE)
async def delete_promo_code_handler(message: Message, state: FSMContext, bot: Bot):
    promocode = message.text
    try:
        deactivate_promocode(promocode)
        await message.reply(f"<b>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>", parse_mode='HTML')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await message.reply("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.</b>", parse_mode='HTML')
    finally:
        await state.clear()


@router.message(AdminState.ADD_TASK)
async def add_task_handler(message: Message, state: FSMContext, bot: Bot):
    text = message.text
    await state.update_data(task_text=text)
    await bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –≤ –∑–≤–µ–∑–¥–∞—Ö: </b>", parse_mode='HTML')
    await state.set_state(AdminState.ADD_TASK_REWARD)


@router.message(AdminState.ADD_TASK_REWARD)
async def add_task_reward_handler(message: Message, state: FSMContext, bot: Bot):
    stars = message.text
    await state.update_data(task_reward=stars)
    await bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª: </b>", parse_mode='HTML')
    await state.set_state(AdminState.CHECK_TASK_BOT)

@router.message(AdminState.CHECK_TASK_BOT)
async def check_task_bot(message: Message, state: FSMContext, bot: Bot):
    channel = message.text
    await state.update_data(task_channel=channel)
    await bot.send_message(message.chat.id, "<b>–ë–æ—Ç? –î–∞/–Ω–µ—Ç</b>", parse_mode='HTML')
    await state.set_state(AdminState.ADD_MAX_USES)

@router.message(AdminState.ADD_MAX_USES)
async def add_max_uses_handler(message: Message, state: FSMContext, bot: Bot):
    boter = message.text
    # print(boter)
    await state.update_data(task_bot=boter)
    await bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: </b>", parse_mode='HTML')
    await state.set_state(AdminState.ADD_TASK_PRIVATE)

@router.message(AdminState.ADD_TASK_PRIVATE)
async def add_task_private_handler(message: Message, state: FSMContext, bot: Bot):
    max_compl = message.text
    await state.update_data(task_max_compl=max_compl)
    await bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: (–ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π -> –≤–≤–µ–¥–∏—Ç–µ 0)</b>", parse_mode='HTML')
    await state.set_state(AdminState.ADD_TASK_CHANNEL)

@router.message(AdminState.ADD_TASK_CHANNEL)
async def add_task_channel_handler(message: Message, state: FSMContext, bot: Bot):
    channel_id_private = int(message.text)
    data = await state.get_data()
    text = data.get('task_text')
    stars = data.get('task_reward')
    channel = data.get('task_channel')
    boter = str(data.get('task_bot'))
    max_compl = data.get('task_max_compl')
    try:
        await state.clear()
        add_tasker(text, stars, channel, boter if boter.lower() == "–¥–∞" else "none", int(max_compl), channel_id_private) 
        await message.reply(f"<b>‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>", parse_mode='HTML')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await message.reply("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.</b>", parse_mode='HTML')

@router.message(AdminState.REMOVE_TASK)
async def delete_task_handler(message: Message, state: FSMContext, bot: Bot):
    try:
        task_id = int(message.text)
        delete_task(task_id)
        await message.reply(f"<b>‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!</b>", parse_mode='HTML')
    except ValueError:
        await message.reply("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞–Ω–∏—è (—á–∏—Å–ª–æ).</b>", parse_mode='HTML')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await message.reply("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.</b>", parse_mode='HTML')
    finally:
        await state.clear()


async def show_leaderboard(message: Message, period, bot: Bot):
    user_id = message.chat.id
    try:
        await bot.delete_message(user_id, message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        top_referrals = get_top_referrals_formatted(period)
        user_rank = get_user_referral_rank_formatted(user_id, period)
        builder = InlineKeyboardBuilder()
        if period == "day":
            builder.button(text="üìÖ –¢–æ–ø –∑–∞ –º–µ—Å—è—Ü", callback_data="month")
            builder.button(text="üìÖ –¢–æ–ø –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="week")
        elif period == "week":
            builder.button(text="üìÖ –¢–æ–ø –∑–∞ –¥–µ–Ω—å", callback_data="leaders")
            builder.button(text="üìÖ –¢–æ–ø –∑–∞ –º–µ—Å—è—Ü", callback_data="month")
        elif period == "month":
            builder.button(text="üìÖ –¢–æ–ø –∑–∞ –¥–µ–Ω—å", callback_data="leaders")
            builder.button(text="üìÖ –¢–æ–ø –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="week")
        builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
        markup = builder.adjust(2, 1).as_markup()

        if isinstance(top_referrals, str):
            text = f"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–µ—Ä–æ–≤ –∑–∞ {get_period_name(period)}:</b>\n\n{top_referrals}"
        else:
            text = f"<b>–¢–æ–ø 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ {get_period_name(period)}:</b>\n\n"
            for line in top_referrals:
                text += line + "\n"
            text += "\n" + user_rank

        with open('photos/leaders.jpg', 'rb') as photo:
            input_photo_leaders = FSInputFile("photos/leaders.jpg")
            await bot.send_photo(user_id, photo=input_photo_leaders, caption=text, parse_mode='HTML', reply_markup=markup)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ {period}: {e}")
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
        markup = builder.as_markup()
        await bot.send_message(user_id, f"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–µ—Ä–æ–≤ –∑–∞ {get_period_name(period)}.</b>", parse_mode='HTML', reply_markup=markup)


def get_period_name(period):
    if period == 'day':
        return "24 —á–∞—Å–∞"
    elif period == 'week':
        return "–Ω–µ–¥–µ–ª—é"
    elif period == 'month':
        return "–º–µ—Å—è—Ü"
    return period

async def set_bot_commands(bot: Bot):
    commands = [
        types.BotCommand(command='start', description='üåü –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã üåü')
    ]
    await bot.set_my_commands(commands=commands)
    await bot.set_chat_menu_button(menu_button=types.MenuButtonCommands())

async def on_startup(bot: Bot):
    await set_bot_commands(bot)

async def main():    
    bot = Bot(token=TOKEN)
    dp = Dispatcher()
    dp.message.middleware(AntiFloodMiddleware(limit=1))
    dp.callback_query.middleware(AntiFloodMiddleware(limit=1))
    dp.startup.register(on_startup)
    dp.include_router(router)
    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_expired_boosts, 'interval', hours=24)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())